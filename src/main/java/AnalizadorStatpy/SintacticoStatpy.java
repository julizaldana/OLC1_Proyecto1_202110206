
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorStatpy;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoStatpy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoStatpy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoStatpy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoStatpy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\051\003\000\002\052" +
    "\004\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\057\002\000\002\060\002\000\002\053\013\000" +
    "\002\056\004\000\002\054\004\000\002\054\003\000\002" +
    "\055\005\000\002\055\007\000\002\055\007\000\002\055" +
    "\011\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\021" +
    "\005\000\002\022\005\000\002\023\007\000\002\023\007" +
    "\000\002\024\007\000\002\024\007\000\002\025\006\000" +
    "\002\025\005\000\002\025\004\000\002\025\005\000\002" +
    "\025\005\000\002\025\006\000\002\026\004\000\002\026" +
    "\003\000\002\027\012\000\002\027\011\000\002\027\004" +
    "\000\002\027\003\000\002\030\012\000\002\030\011\000" +
    "\002\030\004\000\002\030\003\000\002\032\006\000\002" +
    "\032\005\000\002\033\007\000\002\033\007\000\002\034" +
    "\012\000\002\034\011\000\002\034\003\000\002\034\012" +
    "\000\002\036\006\000\002\036\005\000\002\037\007\000" +
    "\002\037\007\000\002\041\012\000\002\041\011\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\005\000\002\003\005\000\002\004\006\000\002\004\005" +
    "\000\002\004\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\010\005\000\002\010\006\000\002\010\004\000\002\010" +
    "\005\000\002\007\005\000\002\007\003\000\002\007\005" +
    "\000\002\007\003\000\002\012\017\000\002\012\017\000" +
    "\002\013\005\000\002\014\014\000\002\014\014\000\002" +
    "\015\005\000\002\016\013\000\002\017\005\000\002\017" +
    "\003\000\002\020\013\000\002\042\022\000\002\044\012" +
    "\000\002\044\011\000\002\044\003\000\002\044\012\000" +
    "\002\045\023\000\002\045\022\000\002\043\005\000\002" +
    "\046\017\000\002\046\012\000\002\047\012\000\002\047" +
    "\011\000\002\047\003\000\002\050\017\000\002\050\012" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0168\000\010\016\007\026\005\027\004\001\002\000" +
    "\006\002\ufffc\016\ufffc\001\002\000\006\002\ufffd\016\ufffd" +
    "\001\002\000\006\002\ufffe\016\ufffe\001\002\000\004\017" +
    "\014\001\002\000\006\002\000\016\007\001\002\000\004" +
    "\002\012\001\002\000\004\002\001\001\002\000\006\002" +
    "\uffff\016\uffff\001\002\000\004\056\015\001\002\000\004" +
    "\057\ufffb\001\002\000\004\057\017\001\002\000\004\060" +
    "\020\001\002\000\034\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\022\ufffa\026\ufffa\027\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\054\ufffa\055\ufffa\001\002\000\034\007\037\010\045" +
    "\011\046\012\022\013\036\022\027\026\043\027\024\046" +
    "\032\047\041\050\030\054\044\055\026\001\002\000\004" +
    "\004\uffe7\001\002\000\036\007\uffee\010\uffee\011\uffee\012" +
    "\uffee\013\uffee\022\uffee\026\uffee\027\uffee\046\uffee\047\uffee" +
    "\050\uffee\054\uffee\055\uffee\061\uffee\001\002\000\036\007" +
    "\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\022\uffeb\026\uffeb" +
    "\027\uffeb\046\uffeb\047\uffeb\050\uffeb\054\uffeb\055\uffeb\061" +
    "\uffeb\001\002\000\036\007\037\010\045\011\046\012\022" +
    "\013\036\022\027\026\043\027\024\046\032\047\041\050" +
    "\030\054\044\055\026\061\u0169\001\002\000\004\056\u015b" +
    "\001\002\000\004\020\u0155\001\002\000\004\056\u0121\001" +
    "\002\000\036\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\022\uffed\026\uffed\027\uffed\046\uffed\047\uffed\050\uffed\054" +
    "\uffed\055\uffed\061\uffed\001\002\000\004\056\u010b\001\002" +
    "\000\036\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\022" +
    "\uffef\026\uffef\027\uffef\046\uffef\047\uffef\050\uffef\054\uffef" +
    "\055\uffef\061\uffef\001\002\000\004\004\366\001\002\000" +
    "\036\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\022\ufff1" +
    "\026\ufff1\027\ufff1\046\ufff1\047\ufff1\050\ufff1\054\ufff1\055" +
    "\ufff1\061\ufff1\001\002\000\004\004\uffe6\001\002\000\004" +
    "\004\uffea\001\002\000\036\007\ufff6\010\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\022\ufff6\026\ufff6\027\ufff6\046\ufff6\047\ufff6" +
    "\050\ufff6\054\ufff6\055\ufff6\061\ufff6\001\002\000\004\056" +
    "\210\001\002\000\036\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\022\ufff0\026\ufff0\027\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\054\ufff0\055\ufff0\061\ufff0\001\002\000\036\007\uffec" +
    "\010\uffec\011\uffec\012\uffec\013\uffec\022\uffec\026\uffec\027" +
    "\uffec\046\uffec\047\uffec\050\uffec\054\uffec\055\uffec\061\uffec" +
    "\001\002\000\004\056\047\001\002\000\004\004\uffe9\001" +
    "\002\000\004\004\uffe8\001\002\000\014\007\037\010\045" +
    "\011\046\012\022\013\036\001\002\000\004\004\051\001" +
    "\002\000\004\064\052\001\002\000\004\005\053\001\002" +
    "\000\004\063\054\001\002\000\014\004\055\005\063\006" +
    "\062\024\057\025\061\001\002\000\040\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\057\uffb9\063\uffb9" +
    "\001\002\000\034\030\174\031\204\032\175\033\201\034" +
    "\200\035\173\036\205\037\171\040\202\041\177\042\172" +
    "\043\206\044\203\001\002\000\040\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\057\uffb7\063\uffb7\001" +
    "\002\000\004\063\064\001\002\000\040\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\057\uffb5\063\uffb5" +
    "\001\002\000\040\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6" +
    "\043\uffb6\044\uffb6\057\uffb6\063\uffb6\001\002\000\040\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\057" +
    "\uffb8\063\uffb8\001\002\000\004\004\065\001\002\000\004" +
    "\030\066\001\002\000\004\030\067\001\002\000\004\057" +
    "\070\001\002\000\004\060\071\001\002\000\006\022\074" +
    "\054\072\001\002\000\004\056\152\001\002\000\006\054" +
    "\132\061\uff92\001\002\000\004\020\077\001\002\000\004" +
    "\061\076\001\002\000\036\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\013\uff95\022\uff95\026\uff95\027\uff95\046\uff95\047\uff95" +
    "\050\uff95\054\uff95\055\uff95\061\uff95\001\002\000\004\023" +
    "\100\001\002\000\004\056\101\001\002\000\006\004\102" +
    "\006\104\001\002\000\004\057\uffa0\001\002\000\004\057" +
    "\110\001\002\000\006\030\105\057\uffa2\001\002\000\006" +
    "\004\106\005\107\001\002\000\004\057\uffa3\001\002\000" +
    "\004\057\uffa1\001\002\000\004\063\111\001\002\000\010" +
    "\022\114\054\072\061\uff93\001\002\000\006\054\132\061" +
    "\uff91\001\002\000\006\022\123\061\uff94\001\002\000\004" +
    "\020\115\001\002\000\004\023\116\001\002\000\004\056" +
    "\117\001\002\000\006\004\102\006\104\001\002\000\004" +
    "\057\121\001\002\000\004\063\122\001\002\000\012\004" +
    "\uffc2\022\uffc2\061\uffc2\063\uffc2\001\002\000\004\020\124" +
    "\001\002\000\004\023\125\001\002\000\004\056\126\001" +
    "\002\000\006\004\102\006\104\001\002\000\004\057\130" +
    "\001\002\000\004\063\131\001\002\000\012\004\uffc3\022" +
    "\uffc3\061\uffc3\063\uffc3\001\002\000\004\056\133\001\002" +
    "\000\014\007\037\010\045\011\046\012\022\013\036\001" +
    "\002\000\004\004\135\001\002\000\004\064\136\001\002" +
    "\000\004\005\137\001\002\000\004\063\140\001\002\000" +
    "\014\004\055\005\063\006\062\024\057\025\061\001\002" +
    "\000\004\063\142\001\002\000\004\004\143\001\002\000" +
    "\004\030\144\001\002\000\004\030\145\001\002\000\004" +
    "\057\146\001\002\000\004\060\147\001\002\000\006\022" +
    "\074\054\072\001\002\000\004\061\151\001\002\000\006" +
    "\054\uff90\061\uff90\001\002\000\014\007\037\010\045\011" +
    "\046\012\022\013\036\001\002\000\004\004\154\001\002" +
    "\000\004\064\155\001\002\000\004\005\156\001\002\000" +
    "\004\063\157\001\002\000\014\004\055\005\063\006\062" +
    "\024\057\025\061\001\002\000\004\063\161\001\002\000" +
    "\004\004\162\001\002\000\004\030\163\001\002\000\004" +
    "\030\164\001\002\000\004\057\165\001\002\000\004\060" +
    "\166\001\002\000\006\022\074\054\072\001\002\000\004" +
    "\061\170\001\002\000\006\054\uff8f\061\uff8f\001\002\000" +
    "\016\004\uffad\005\uffad\006\uffad\024\uffad\025\uffad\044\uffad" +
    "\001\002\000\016\004\uffaa\005\uffaa\006\uffaa\024\uffaa\025" +
    "\uffaa\044\uffaa\001\002\000\016\004\uffaf\005\uffaf\006\uffaf" +
    "\024\uffaf\025\uffaf\044\uffaf\001\002\000\016\004\uffb4\005" +
    "\uffb4\006\uffb4\024\uffb4\025\uffb4\044\uffb4\001\002\000\016" +
    "\004\uffb2\005\uffb2\006\uffb2\024\uffb2\025\uffb2\044\uffb2\001" +
    "\002\000\014\004\055\005\063\006\062\024\057\025\061" +
    "\001\002\000\016\004\uffab\005\uffab\006\uffab\024\uffab\025" +
    "\uffab\044\uffab\001\002\000\016\004\uffb0\005\uffb0\006\uffb0" +
    "\024\uffb0\025\uffb0\044\uffb0\001\002\000\016\004\uffb1\005" +
    "\uffb1\006\uffb1\024\uffb1\025\uffb1\044\uffb1\001\002\000\016" +
    "\004\uffac\005\uffac\006\uffac\024\uffac\025\uffac\044\uffac\001" +
    "\002\000\016\004\uffa8\005\uffa8\006\uffa8\024\uffa8\025\uffa8" +
    "\044\uffa8\001\002\000\016\004\uffb3\005\uffb3\006\uffb3\024" +
    "\uffb3\025\uffb3\044\uffb3\001\002\000\016\004\uffae\005\uffae" +
    "\006\uffae\024\uffae\025\uffae\044\uffae\001\002\000\016\004" +
    "\uffa9\005\uffa9\006\uffa9\024\uffa9\025\uffa9\044\uffa9\001\002" +
    "\000\004\063\uff8e\001\002\000\016\004\214\005\063\006" +
    "\062\024\057\025\061\044\216\001\002\000\034\030\174" +
    "\031\204\032\175\033\201\034\200\035\173\036\205\037" +
    "\171\040\202\041\177\042\172\043\206\044\203\001\002" +
    "\000\004\044\360\001\002\000\036\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\013\uffe4\022\uffe4\026\uffe4\027\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\054\uffe4\055\uffe4\061\uffe4\001\002\000" +
    "\036\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\057\354\001\002\000\004\057\233\001\002\000\016" +
    "\004\055\005\063\006\062\024\057\025\061\044\uffd8\001" +
    "\002\000\036\030\174\031\204\032\175\033\201\034\200" +
    "\035\173\036\205\037\171\040\202\041\177\042\172\043" +
    "\206\044\203\057\uffdd\001\002\000\016\004\055\005\063" +
    "\006\062\024\057\025\061\044\224\001\002\000\036\030" +
    "\174\031\204\032\175\033\201\034\200\035\173\036\205" +
    "\037\171\040\202\041\177\042\172\043\206\044\203\057" +
    "\uffdc\001\002\000\016\004\055\005\063\006\062\024\057" +
    "\025\061\044\224\001\002\000\040\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\044\uffa7\057\uffa7\063\uffa7\001" +
    "\002\000\016\004\uffd8\005\uffd8\006\uffd8\024\uffd8\025\uffd8" +
    "\044\uffd8\001\002\000\016\004\055\005\063\006\062\024" +
    "\057\025\061\044\227\001\002\000\040\030\uffa6\031\uffa6" +
    "\032\uffa6\033\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\057\uffa6\063\uffa6" +
    "\001\002\000\016\004\uffd9\005\uffd9\006\uffd9\024\uffd9\025" +
    "\uffd9\044\uffd9\001\002\000\040\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\057\uffa5\063\uffa5\001\002" +
    "\000\016\004\055\005\063\006\062\024\057\025\061\044" +
    "\227\001\002\000\040\030\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\057\uffa4\063\uffa4\001\002\000\004" +
    "\060\234\001\002\000\010\022\240\046\242\047\236\001" +
    "\002\000\006\046\314\047\236\001\002\000\004\056\351" +
    "\001\002\000\004\061\350\001\002\000\004\020\341\001" +
    "\002\000\006\047\324\061\uffd0\001\002\000\004\056\243" +
    "\001\002\000\016\004\245\005\063\006\062\024\057\025" +
    "\061\044\216\001\002\000\014\004\uffce\046\uffce\047\uffce" +
    "\061\uffce\063\uffce\001\002\000\036\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\057\320\001\002\000" +
    "\004\057\247\001\002\000\004\060\250\001\002\000\006" +
    "\022\253\046\242\001\002\000\006\046\314\061\uffc9\001" +
    "\002\000\004\061\317\001\002\000\004\020\254\001\002" +
    "\000\004\023\255\001\002\000\004\056\256\001\002\000" +
    "\006\004\102\006\104\001\002\000\004\057\260\001\002" +
    "\000\004\063\261\001\002\000\010\022\114\055\264\061" +
    "\uffca\001\002\000\006\022\123\061\uffcb\001\002\000\004" +
    "\061\uffc8\001\002\000\004\056\265\001\002\000\016\004" +
    "\055\005\063\006\062\024\057\025\061\044\216\001\002" +
    "\000\004\057\267\001\002\000\004\060\270\001\002\000" +
    "\006\022\273\046\242\001\002\000\010\004\uff89\046\314" +
    "\063\uff89\001\002\000\006\004\303\063\304\001\002\000" +
    "\004\020\274\001\002\000\004\023\275\001\002\000\004" +
    "\056\276\001\002\000\006\004\102\006\104\001\002\000" +
    "\004\057\300\001\002\000\004\063\301\001\002\000\010" +
    "\004\uff8a\022\114\063\uff8a\001\002\000\010\004\uff8b\022" +
    "\123\063\uff8b\001\002\000\004\064\306\001\002\000\004" +
    "\061\305\001\002\000\004\061\uff87\001\002\000\004\004" +
    "\307\001\002\000\004\030\310\001\002\000\004\005\311" +
    "\001\002\000\004\063\312\001\002\000\004\061\313\001" +
    "\002\000\004\061\uff88\001\002\000\004\056\315\001\002" +
    "\000\016\004\245\005\063\006\062\024\057\025\061\044" +
    "\216\001\002\000\014\004\uffcf\046\uffcf\047\uffcf\061\uffcf" +
    "\063\uffcf\001\002\000\014\004\uffcd\046\uffcd\047\uffcd\061" +
    "\uffcd\063\uffcd\001\002\000\004\060\321\001\002\000\006" +
    "\022\253\046\242\001\002\000\004\061\323\001\002\000" +
    "\014\004\uffcc\046\uffcc\047\uffcc\061\uffcc\063\uffcc\001\002" +
    "\000\004\056\325\001\002\000\016\004\327\005\063\006" +
    "\062\024\057\025\061\044\216\001\002\000\014\047\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\061\uffc7\001\002\000\036\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\057" +
    "\335\001\002\000\004\057\331\001\002\000\004\060\332" +
    "\001\002\000\010\022\240\046\242\047\236\001\002\000" +
    "\004\061\334\001\002\000\014\047\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\061\uffc5\001\002\000\004\060\336\001\002\000" +
    "\010\022\240\046\242\047\236\001\002\000\004\061\340" +
    "\001\002\000\014\047\uffc4\051\uffc4\052\uffc4\053\uffc4\061" +
    "\uffc4\001\002\000\004\023\342\001\002\000\004\056\343" +
    "\001\002\000\006\004\102\006\104\001\002\000\004\057" +
    "\345\001\002\000\004\063\346\001\002\000\006\022\114" +
    "\061\uffd2\001\002\000\006\022\123\061\uffd3\001\002\000" +
    "\036\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\022\uffe1" +
    "\026\uffe1\027\uffe1\046\uffe1\047\uffe1\050\uffe1\054\uffe1\055" +
    "\uffe1\061\uffe1\001\002\000\016\004\327\005\063\006\062" +
    "\024\057\025\061\044\216\001\002\000\014\047\uffc6\051" +
    "\uffc6\052\uffc6\053\uffc6\061\uffc6\001\002\000\006\047\324" +
    "\061\uffd1\001\002\000\004\060\355\001\002\000\010\022" +
    "\240\046\242\047\236\001\002\000\004\061\357\001\002" +
    "\000\036\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\022" +
    "\uffe0\026\uffe0\027\uffe0\046\uffe0\047\uffe0\050\uffe0\054\uffe0" +
    "\055\uffe0\061\uffe0\001\002\000\016\004\055\005\063\006" +
    "\062\024\057\025\061\044\uffd9\001\002\000\036\030\174" +
    "\031\204\032\175\033\201\034\200\035\173\036\205\037" +
    "\171\040\202\041\177\042\172\043\206\044\203\057\uffdb" +
    "\001\002\000\036\030\174\031\204\032\175\033\201\034" +
    "\200\035\173\036\205\037\171\040\202\041\177\042\172" +
    "\043\206\044\203\057\uffda\001\002\000\014\004\055\005" +
    "\063\006\062\024\057\025\061\001\002\000\036\030\174" +
    "\031\204\032\175\033\201\034\200\035\173\036\205\037" +
    "\171\040\202\041\177\042\172\043\206\044\203\057\uffde" +
    "\001\002\000\036\030\174\031\204\032\175\033\201\034" +
    "\200\035\173\036\205\037\171\040\202\041\177\042\172" +
    "\043\206\044\203\057\uffdf\001\002\000\006\063\367\064" +
    "\370\001\002\000\036\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\022\ufff5\026\ufff5\027\ufff5\046\ufff5\047\ufff5\050" +
    "\ufff5\054\ufff5\055\ufff5\061\ufff5\001\002\000\020\004\375" +
    "\005\373\006\062\024\374\025\061\044\376\045\u0100\001" +
    "\002\000\034\030\174\031\204\032\175\033\201\034\200" +
    "\035\173\036\205\037\171\040\202\041\177\042\172\043" +
    "\206\044\203\001\002\000\004\063\u0107\001\002\000\036" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\063\uffc1\001\002\000\036\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\063\uffc0\001\002\000\036\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9" +
    "\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\063" +
    "\uffbf\001\002\000\014\004\055\005\063\006\062\024\057" +
    "\025\061\001\002\000\004\063\u0105\001\002\000\006\004" +
    "\u0101\005\u0102\001\002\000\004\045\u0104\001\002\000\004" +
    "\045\u0103\001\002\000\004\063\uffbd\001\002\000\004\063" +
    "\uffbe\001\002\000\036\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\022\ufff4\026\ufff4\027\ufff4\046\ufff4\047\ufff4\050" +
    "\ufff4\054\ufff4\055\ufff4\061\ufff4\001\002\000\004\063\uffba" +
    "\001\002\000\036\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013" +
    "\ufff3\022\ufff3\026\ufff3\027\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\054\ufff3\055\ufff3\061\ufff3\001\002\000\014\004\055\005" +
    "\063\006\062\024\057\025\061\001\002\000\036\030\174" +
    "\031\204\032\175\033\201\034\200\035\173\036\205\037" +
    "\171\040\202\041\177\042\172\043\206\044\203\063\uffbb" +
    "\001\002\000\036\030\174\031\204\032\175\033\201\034" +
    "\200\035\173\036\205\037\171\040\202\041\177\042\172" +
    "\043\206\044\203\063\uffbc\001\002\000\016\004\u010c\005" +
    "\063\006\062\024\057\025\061\044\216\001\002\000\036" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\057\u011d\001\002\000\004\057\u010f\001\002\000\036\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\022\uffe5\026\uffe5" +
    "\027\uffe5\046\uffe5\047\uffe5\050\uffe5\054\uffe5\055\uffe5\061" +
    "\uffe5\001\002\000\004\060\u0110\001\002\000\006\022\u0113" +
    "\046\242\001\002\000\010\046\314\047\236\061\uffd4\001" +
    "\002\000\004\061\u011b\001\002\000\004\020\u0114\001\002" +
    "\000\004\023\u0115\001\002\000\004\056\u0116\001\002\000" +
    "\006\004\102\006\104\001\002\000\004\057\u0118\001\002" +
    "\000\004\063\u0119\001\002\000\006\022\114\061\uffd6\001" +
    "\002\000\006\022\123\061\uffd7\001\002\000\036\007\uffe3" +
    "\010\uffe3\011\uffe3\012\uffe3\013\uffe3\022\uffe3\026\uffe3\027" +
    "\uffe3\046\uffe3\047\uffe3\050\uffe3\054\uffe3\055\uffe3\061\uffe3" +
    "\001\002\000\006\047\324\061\uffd5\001\002\000\004\060" +
    "\u011e\001\002\000\006\022\u0113\046\242\001\002\000\004" +
    "\061\u0120\001\002\000\036\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\013\uffe2\022\uffe2\026\uffe2\027\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\054\uffe2\055\uffe2\061\uffe2\001\002\000\004\004" +
    "\u0122\001\002\000\004\057\u0123\001\002\000\004\060\u0124" +
    "\001\002\000\004\051\u0125\001\002\000\004\005\u0126\001" +
    "\002\000\004\021\u0127\001\002\000\004\004\u0128\001\002" +
    "\000\004\064\u0129\001\002\000\004\005\u012a\001\002\000" +
    "\004\063\u012b\001\002\000\006\046\242\052\u012e\001\002" +
    "\000\006\046\314\047\236\001\002\000\036\007\uff9f\010" +
    "\uff9f\011\uff9f\012\uff9f\013\uff9f\022\uff9f\026\uff9f\027\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\054\uff9f\055\uff9f\061\uff9f\001" +
    "\002\000\004\063\u0130\001\002\000\036\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\022\uff9e\026\uff9e\027\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\054\uff9e\055\uff9e\061\uff9e\001\002" +
    "\000\004\051\u0131\001\002\000\004\005\u0132\001\002\000" +
    "\004\021\u0133\001\002\000\004\004\u0134\001\002\000\004" +
    "\064\u0135\001\002\000\004\005\u0136\001\002\000\004\063" +
    "\u0137\001\002\000\006\046\242\051\u013b\001\002\000\006" +
    "\046\314\047\236\001\002\000\036\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\022\uff9b\026\uff9b\027\uff9b\046\uff9b" +
    "\047\uff9b\050\uff9b\054\uff9b\055\uff9b\061\uff9b\001\002\000" +
    "\036\007\uff9c\010\uff9c\011\uff9c\012\uff9c\013\uff9c\022\uff9c" +
    "\026\uff9c\027\uff9c\046\uff9c\047\uff9c\050\uff9c\054\uff9c\055" +
    "\uff9c\061\uff9c\001\002\000\004\005\u013c\001\002\000\004" +
    "\021\u013d\001\002\000\004\004\u013e\001\002\000\004\064" +
    "\u013f\001\002\000\004\005\u0140\001\002\000\004\063\u0141" +
    "\001\002\000\006\046\242\053\u0142\001\002\000\004\021" +
    "\u0149\001\002\000\006\046\314\047\236\001\002\000\004" +
    "\061\u0146\001\002\000\004\061\uff97\001\002\000\036\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\013\uff99\022\uff99\026\uff99" +
    "\027\uff99\046\uff99\047\uff99\050\uff99\054\uff99\055\uff99\061" +
    "\uff99\001\002\000\006\047\324\053\u0142\001\002\000\004" +
    "\061\uff98\001\002\000\004\022\u014a\001\002\000\004\020" +
    "\u014b\001\002\000\004\023\u014c\001\002\000\004\056\u014d" +
    "\001\002\000\006\004\102\006\104\001\002\000\004\057" +
    "\u014f\001\002\000\004\063\u0150\001\002\000\004\061\uff96" +
    "\001\002\000\006\047\324\051\u013b\001\002\000\036\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\022\uff9a\026\uff9a" +
    "\027\uff9a\046\uff9a\047\uff9a\050\uff9a\054\uff9a\055\uff9a\061" +
    "\uff9a\001\002\000\006\047\324\052\u012e\001\002\000\036" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\022\uff9d\026" +
    "\uff9d\027\uff9d\046\uff9d\047\uff9d\050\uff9d\054\uff9d\055\uff9d" +
    "\061\uff9d\001\002\000\004\023\u0156\001\002\000\004\056" +
    "\u0157\001\002\000\006\004\102\006\104\001\002\000\004" +
    "\057\u0159\001\002\000\004\063\u015a\001\002\000\036\007" +
    "\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\022\ufff2\026\ufff2" +
    "\027\ufff2\046\ufff2\047\ufff2\050\ufff2\054\ufff2\055\ufff2\061" +
    "\ufff2\001\002\000\016\004\055\005\063\006\062\024\057" +
    "\025\061\044\216\001\002\000\004\057\u015d\001\002\000" +
    "\004\060\u015e\001\002\000\006\022\273\046\242\001\002" +
    "\000\006\004\u0160\063\u0161\001\002\000\004\064\u0163\001" +
    "\002\000\004\061\u0162\001\002\000\036\007\uff8c\010\uff8c" +
    "\011\uff8c\012\uff8c\013\uff8c\022\uff8c\026\uff8c\027\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\054\uff8c\055\uff8c\061\uff8c\001\002" +
    "\000\004\004\u0164\001\002\000\004\030\u0165\001\002\000" +
    "\004\005\u0166\001\002\000\004\063\u0167\001\002\000\004" +
    "\061\u0168\001\002\000\036\007\uff8d\010\uff8d\011\uff8d\012" +
    "\uff8d\013\uff8d\022\uff8d\026\uff8d\027\uff8d\046\uff8d\047\uff8d" +
    "\050\uff8d\054\uff8d\055\uff8d\061\uff8d\001\002\000\006\002" +
    "\ufff9\016\ufff9\001\002\000\036\007\ufff7\010\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\022\ufff7\026\ufff7\027\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\054\ufff7\055\ufff7\061\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0168\000\010\051\010\052\007\053\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\060\020\001\001\000\022\002\033\012\032\021\034" +
    "\022\041\042\022\046\030\054\024\055\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\033\012\032\021\034\022\041\042\022\046\030\055" +
    "\u0169\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\055\043\057\001\001\000\002\001" +
    "\001\000\004\006\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\074\045" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\112\045\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\055\043\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\044\147\045\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\055\043\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\166" +
    "\045\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\210" +
    "\024\212\025\214\026\211\001\001\000\004\006\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\216\001\001\000\006\006" +
    "\217\010\220\001\001\000\006\005\227\026\230\001\001" +
    "\000\004\006\221\001\001\000\006\005\222\026\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\236\032\234\036\240\001\001\000" +
    "\004\036\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\210\025\245\026\211\033\243\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\250\034\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\261\050\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\210\025\265\026\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\032\270\047\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\276\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\210\025\245\026\211\033" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\250\034\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\210" +
    "\025\327\026\211\037\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\030\332\032\234\036\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\336\032\234" +
    "\036\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\210" +
    "\025\327\026\211\037\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\355\032\234" +
    "\036\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\360\001\001\000\006\006\217\010\361\001\001" +
    "\000\004\006\221\001\001\000\004\005\363\001\001\000" +
    "\006\006\217\010\364\001\001\000\004\006\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\376\004" +
    "\371\005\370\001\001\000\004\006\u0107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\u0105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u0108\001\001\000\006\006" +
    "\217\010\u0109\001\001\000\004\006\221\001\001\000\012" +
    "\005\210\023\u010d\025\u010c\026\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\u0111\032\u0110\001\001\000\004\036\u011b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u0116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\u0119\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u011e\032\u0110\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\u012c\014\u012e\032\u012b" +
    "\001\001\000\004\036\u0152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\u0139" +
    "\016\u0138\032\u0137\001\001\000\004\036\u0150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\u0143\020\u0144\032\u0142" +
    "\001\001\000\002\001\001\000\004\036\u0146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u0151\001\001\000\002\001\001" +
    "\000\004\014\u0153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\u0157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\210\025\u015b\026\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\032\270\047\u015e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoStatpy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoStatpy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoStatpy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    String tmp="";
    String opr="";


//Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultadosSP = new ArrayList<String>();

//Lista para almacenar resultados traducidos
    public ArrayList<String> translationResults = new ArrayList<>();

// Para retornar resultados traducidos
  public ArrayList<String> getTranslationResults() {
        return translationResults;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoStatpy$actions {
  private final SintacticoStatpy parser;

  /** Constructor */
  CUP$SintacticoStatpy$actions(SintacticoStatpy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatpy$do_action_part00000000(
    int                        CUP$SintacticoStatpy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatpy$parser,
    java.util.Stack            CUP$SintacticoStatpy$stack,
    int                        CUP$SintacticoStatpy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoStatpy$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoStatpy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoStatpy$parser.done_parsing();
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		
                    System.out.println(tmp);
                    tmp="";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INICIO",39, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS S 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= comentario 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= comentario2 
            {
              Object RESULT =null;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com2+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",40, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;

                       
         tmp+="def" + " " + mai + "(";
                    
    
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$0",45, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;

                    tmp+=")"+":\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$1",46, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= VOI MAIN PAR_A NT$0 PAR_C LLAV_A NT$1 CUERPO LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		
                    tmp+="if__name__ = “__main__”:\n" + " " + mai + "()";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("S",41, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L ::= TIPO ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=tip+" "+id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("L",44, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO C 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= C 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPO",42, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // C ::= TIPO ID PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // C ::= TIPO ID ASIGNA EXPRESION PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    tmp+=id+" "+"="+" "+exp+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C ::= TIPO ID ASIGNA OPERACION PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    tmp+=id+" "+"="+" "+opr;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              Object RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    tmp+="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= IFSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= ELIFSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C ::= SWITCHSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= FORSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= WHILESTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= comentario 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= comentario2 
            {
              Object RESULT =null;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com2+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= INT1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= CHAR1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= DOUBLE1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO ::= BOOL1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO ::= STRING1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IFSTATE ::= IF PAR_A IFARG 
            {
              String RESULT =null;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp += ifpy + " " + arg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFSTATE",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ELIFSTATE ::= ELSEIF PAR_A ELIFARG 
            {
              String RESULT =null;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp += "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFSTATE",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IFARG ::= OPERIFS PAR_C LLAV_A CUERPOIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                     "   " + cuerpoif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARG",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFARG ::= ID PAR_C LLAV_A CUERPOIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" +
                      "   " + cuerpoif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARG",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELIFARG ::= OPERIFS PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                       "   " + cuerpoelif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFARG",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELIFARG ::= ID PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" + 
                       "   " + cuerpoelif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFARG",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERIFS ::= OP SIGNO OP TERMINO 
            {
              String RESULT =null;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signo2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signo2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op4 + " " + signo2 + " " + op5 + " " +term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERIFS ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op1 + " " + signo + " " + op2;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERIFS ::= NOT OP 
            {
              String RESULT =null;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  " " + "not" + " " + op3;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERIFS ::= NOT OP TERMINO 
            {
              String RESULT =null;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  " " + "not" + " " + op4 + " " + term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERIFS ::= SUPERNOT NOT OP 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  supernot + " " + "not" + " " + op5;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERIFS ::= SUPERNOT NOT OP TERMINO 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int op6left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op6right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op6 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  supernot + " " + "not" + " " + op6 + " " + term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SUPERNOT ::= SUPERNOT NOT 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
             RESULT= supernot + " " + "not";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SUPERNOT",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SUPERNOT ::= NOT 
            {
              String RESULT =null;
		
             RESULT= " " + "not";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SUPERNOT",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPOIF ::= MOREIFS MORELIFS 
            {
              String RESULT =null;
		int ifstate1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifstate1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifstate1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=ifstate1 + "   " + elif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPOIF ::= MOREIFS 
            {
              String RESULT =null;
		int ifstateleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifstateright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifstate = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=ifstate;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                +  print3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPOELIF ::= MOREIFS MORELIFS 
            {
              String RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "      " + ifs + "   " + elifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPOELIF ::= MORELIFS 
            {
              String RESULT =null;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                   RESULT=elifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MOREIFS ::= MOREIFS IF PAR_A IFARGIF 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int ifargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifarg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= moreifs + "   " + ifpy + " " + ifarg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREIFS",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MOREIFS ::= IF PAR_A IFARGIF 
            {
              String RESULT =null;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int ifargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifarg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  ifpy + " " + ifarg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREIFS",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IFARGIF ::= OPERIFS PAR_C LLAV_A IFCUERPOIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int ifcuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifcuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifcuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                     "   " + ifcuerpoif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGIF",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IFARGIF ::= ID PAR_C LLAV_A IFCUERPOIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int ifcuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifcuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifcuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" +
                      "    " + ifcuerpoif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGIF",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "   " + "print("+varprint+")\n"
                                +  print3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "      " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IFCUERPOIF ::= MOREIFS 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "   " + moreifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA WHILESTATEIF 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int morewhifs2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int morewhifs2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String morewhifs2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "      " + "print("+varprint+")\n" + "      "  + morewhifs2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MORELIFS ::= MORELIFS ELSEIF PAR_A IFARGELIF 
            {
              String RESULT =null;
		int morelifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int morelifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String morelifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  morelifs + "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MORELIFS",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MORELIFS ::= ELSEIF PAR_A IFARGELIF 
            {
              String RESULT =null;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MORELIFS",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IFARGELIF ::= OPERIFS PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                       "      " + cuerpoelif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGELIF",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IFARGELIF ::= ID PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" + 
                       "      " + cuerpoelif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGELIF",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MOREPRINTS ::= MOREPRINTS CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int moreprintsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int moreprintsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String moreprints = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= moreprints + "   " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREPRINTS",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MOREPRINTS ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "   " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREPRINTS",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= ENTERO 
            {
              String RESULT =null;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= DOUBLE 
            {
              String RESULT =null;
		int dbleleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int dbleright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dble = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dble;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= COMILLA_S ID COMILLA_S 
            {
              String RESULT =null;
		int cs1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cs1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int cs2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cs2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cs2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cs1 + id + cs2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= COMILLA_S ENTERO COMILLA_S 
            {
              String RESULT =null;
		int cs3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cs3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cs3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int cs4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cs4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cs4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cs3 + nume + cs4;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPERACION ::= OP SIGNO OP TERMINO 
            {
              String RESULT =null;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT  = op3 + " " + signo + " " + op4 + " " + term +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPERACION ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signo1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signo1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  
                    RESULT = op1  + " " + signo1 + " " + op2 +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPERACION ::= NOT OP 
            {
              String RESULT =null;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  
                    RESULT = "not" +  " "  + op5  +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= ENTERO 
            {
              String RESULT =null;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= DOUBLE 
            {
              String RESULT =null;
		int dbleleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int dbleright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dble = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dble;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dec;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIGNO ::= SUMA 
            {
              String RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=sum;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIGNO ::= RESTA 
            {
              String RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String resta = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=resta;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SIGNO ::= MULT 
            {
              String RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mult = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mult;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SIGNO ::= DIV 
            {
              String RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=div;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SIGNO ::= MAYOR 
            {
              String RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mayor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mayor;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SIGNO ::= MENOR 
            {
              String RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String menor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=menor;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SIGNO ::= MAYOR_I 
            {
              String RESULT =null;
		int mayorileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int mayoriright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mayori = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mayori;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SIGNO ::= MENOR_I 
            {
              String RESULT =null;
		int menorileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int menoriright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String menori = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=menori;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SIGNO ::= IGUAL 
            {
              String RESULT =null;
		int iguleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int iguright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String igu = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=igu;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SIGNO ::= DIST 
            {
              String RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int distright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dist = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dist;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SIGNO ::= AND 
            {
              String RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="and";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SIGNO ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="or";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SIGNO ::= NOT 
            {
              String RESULT =null;
		
                    RESULT="not";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TERMINO ::= TERMINO SIGNO OP 
            {
              String RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= term + " " + signo + "  " + op;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // TERMINO ::= TERMINO SIGNO SUPERNOT OP 
            {
              String RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int not1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int not1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String not1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= term + " " + signo + "  " + not1 + "  " + op1;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TERMINO ::= SIGNO OP 
            {
              String RESULT =null;
		int signo2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signo2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= signo2 + "  " + op2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TERMINO ::= SIGNO SUPERNOT OP 
            {
              String RESULT =null;
		int signo3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signo3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= signo3 + "  " + not + "  " + op3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARPRINT ::= CADENA SUMA ID 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad + ", " + id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARPRINT ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARPRINT ::= CADENA SUMA ENTERO 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad + ", " + nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VARPRINT ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SWITCHSTATE ::= SWITCH PAR_A ID PAR_C LLAV_A CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF 
            {
              String RESULT =null;
		int switleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int switright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String swit = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int enu1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "\n" +  switchif + "\n"; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHSTATE",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SWITCHSTATE ::= SWITCH PAR_A ID PAR_C LLAV_A CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA CASE1 
            {
              String RESULT =null;
		int switleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int switright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String swit = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int enu1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "," + "\n"  
                                                        + caso; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHSTATE",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SWITCHIF ::= MOREIFS MORELIFS CASE1 
            {
              String RESULT =null;
		int ifstate1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT = "        " + ifstate1 + "        " + elif + "," + case1;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE1 ::= BREAK PYCOMA CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF2 
            {
              String RESULT =null;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + switchif; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE1",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASE1 ::= BREAK PYCOMA CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA CASE2 
            {
              String RESULT =null;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int case2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + case2; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE1",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SWITCHIF2 ::= MOREIFS MORELIFS CASE2 
            {
              String RESULT =null;
		int ifstate2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int case2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT = "        " + ifstate2 + "        " + elif + "," + case2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF2",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASE2 ::= CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF3 LLAV_C 
            {
              String RESULT =null;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int id4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int id4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int enu4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int enu4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String enu4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                  RESULT = "      " + enu3 + ": " + id4 + " = " + enu4 + "," + "\n" + switchif + 
                                                  "     " + "}\n"; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE2",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SWITCHIF3 ::= MOREIFS MORELIFS CASED 
            {
              String RESULT =null;
		int ifstate3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int casedleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casedright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cased = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                RESULT = "        " + ifstate3 + "        " + elif + "," + cased;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF3",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWITCHIF3 ::= CASED 
            {
              String RESULT =null;
		int casedleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casedright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cased = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 
                RESULT = cased;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF3",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASED ::= DEFAULT DOSP CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "      " + "4: " + "print("+varprint+"),\n";
                                
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASED",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FORSTATE ::= FOR PAR_A TIPO ID ASIGNA ENTERO PYCOMA OPERFOR PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR LLAV_C 
            {
              String RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).right;
		String fors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int operforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String operfor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int cuerpoforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpofor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                            tmp +=   "     "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "        " + cuerpofor ;  
                            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("FORSTATE",32, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CUERPOFOR ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CUERPOFOR ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CUERPOFOR ::= MOREFORS 
            {
              String RESULT =null;
		int moreforsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreforsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String morefors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= morefors;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CUERPOFOR ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREFORS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int moreforsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreforsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String morefors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n" + "           " + morefors;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // MOREFORS ::= MOREFORS FOR PAR_A TIPO ID ASIGNA ENTERO PYCOMA OPERFOR PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR LLAV_C 
            {
              String RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).right;
		String fors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int operforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String operfor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int cuerpoforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpofor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                            RESULT =   "       "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "                         " + cuerpofor ;  
                            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREFORS",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // MOREFORS ::= FOR PAR_A TIPO ID ASIGNA ENTERO PYCOMA OPERFOR PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR LLAV_C 
            {
              String RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).right;
		String fors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int operforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String operfor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int cuerpoforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpofor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                            RESULT =   "       "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "                         " + cuerpofor ;  
                            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREFORS",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OPERFOR ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op2;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERFOR",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // WHILESTATE ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE ID ASIGNA ID SUMA ENTERO PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             tmp += whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile + 
                                "         " + id1 + " = " + id2 + " + " + nume + "\n";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATE",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WHILESTATE ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             tmp += whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATE",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CUERPOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",37, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CUERPOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",37, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CUERPOWHILE ::= MOREIFS 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  moreifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",37, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // WHILESTATEIF ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE ID ASIGNA ID SUMA ENTERO PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             RESULT = whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile + 
                                "         " + id1 + " = " + id2 + " + " + nume + "\n";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATEIF",38, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // WHILESTATEIF ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             RESULT = whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATEIF",38, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoStatpy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatpy$do_action(
    int                        CUP$SintacticoStatpy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatpy$parser,
    java.util.Stack            CUP$SintacticoStatpy$stack,
    int                        CUP$SintacticoStatpy$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoStatpy$do_action_part00000000(
                               CUP$SintacticoStatpy$act_num,
                               CUP$SintacticoStatpy$parser,
                               CUP$SintacticoStatpy$stack,
                               CUP$SintacticoStatpy$top);
    }
}

}
