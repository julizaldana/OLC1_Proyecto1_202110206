
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorStatpy;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoStatpy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoStatpy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoStatpy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoStatpy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\042\003\000\002\043" +
    "\004\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\050\002\000\002\051\002\000\002\044\013\000" +
    "\002\047\004\000\002\045\004\000\002\045\003\000\002" +
    "\046\005\000\002\046\007\000\002\046\007\000\002\046" +
    "\011\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\021\005\000\002\022\005\000\002\023" +
    "\007\000\002\023\007\000\002\024\007\000\002\024\007" +
    "\000\002\025\006\000\002\025\005\000\002\025\004\000" +
    "\002\025\005\000\002\025\005\000\002\025\006\000\002" +
    "\026\004\000\002\026\003\000\002\027\012\000\002\027" +
    "\011\000\002\027\004\000\002\027\003\000\002\030\012" +
    "\000\002\030\011\000\002\030\004\000\002\030\003\000" +
    "\002\032\006\000\002\032\005\000\002\033\007\000\002" +
    "\033\007\000\002\034\012\000\002\034\011\000\002\034" +
    "\003\000\002\036\006\000\002\036\005\000\002\037\007" +
    "\000\002\037\007\000\002\041\012\000\002\041\011\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\003\005\000\002\004\006\000\002\004" +
    "\005\000\002\004\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\010\005\000\002\010\006\000\002\010\004\000\002" +
    "\010\005\000\002\007\005\000\002\007\003\000\002\007" +
    "\005\000\002\007\003\000\002\012\017\000\002\012\017" +
    "\000\002\013\005\000\002\014\014\000\002\014\014\000" +
    "\002\015\005\000\002\016\013\000\002\017\005\000\002" +
    "\017\003\000\002\020\013" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\010\016\007\026\005\027\004\001\002\000" +
    "\006\002\ufffc\016\ufffc\001\002\000\006\002\ufffd\016\ufffd" +
    "\001\002\000\006\002\ufffe\016\ufffe\001\002\000\004\017" +
    "\014\001\002\000\006\002\000\016\007\001\002\000\004" +
    "\002\012\001\002\000\004\002\001\001\002\000\006\002" +
    "\uffff\016\uffff\001\002\000\004\054\015\001\002\000\004" +
    "\055\ufffb\001\002\000\004\055\017\001\002\000\004\056" +
    "\020\001\002\000\030\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\022\ufffa\026\ufffa\027\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\001\002\000\030\007\026\010\036\011\042\012\023" +
    "\013\031\022\034\026\033\027\040\046\025\047\024\050" +
    "\032\001\002\000\032\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\022\ufff6\026\ufff6\027\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\057\ufff6\001\002\000\004\004\uffe9\001\002\000\004" +
    "\054\370\001\002\000\004\054\342\001\002\000\004\004" +
    "\uffec\001\002\000\032\007\026\010\036\011\042\012\023" +
    "\013\031\022\034\026\033\027\040\046\025\047\024\050" +
    "\032\057\341\001\002\000\004\004\313\001\002\000\004" +
    "\004\uffe8\001\002\000\004\054\056\001\002\000\032\007" +
    "\uffee\010\uffee\011\uffee\012\uffee\013\uffee\022\uffee\026\uffee" +
    "\027\uffee\046\uffee\047\uffee\050\uffee\057\uffee\001\002\000" +
    "\004\020\043\001\002\000\032\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\013\uffef\022\uffef\026\uffef\027\uffef\046\uffef\047" +
    "\uffef\050\uffef\057\uffef\001\002\000\004\004\uffeb\001\002" +
    "\000\032\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\022" +
    "\ufff1\026\ufff1\027\ufff1\046\ufff1\047\ufff1\050\ufff1\057\ufff1" +
    "\001\002\000\032\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\022\uffed\026\uffed\027\uffed\046\uffed\047\uffed\050\uffed" +
    "\057\uffed\001\002\000\032\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\022\ufff0\026\ufff0\027\ufff0\046\ufff0\047\ufff0" +
    "\050\ufff0\057\ufff0\001\002\000\004\004\uffea\001\002\000" +
    "\004\023\044\001\002\000\004\054\045\001\002\000\006" +
    "\004\046\006\050\001\002\000\004\055\uffa3\001\002\000" +
    "\004\055\054\001\002\000\006\030\051\055\uffa5\001\002" +
    "\000\006\004\052\005\053\001\002\000\004\055\uffa6\001" +
    "\002\000\004\055\uffa4\001\002\000\004\061\055\001\002" +
    "\000\032\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\022" +
    "\ufff2\026\ufff2\027\ufff2\046\ufff2\047\ufff2\050\ufff2\057\ufff2" +
    "\001\002\000\004\004\057\001\002\000\004\055\060\001" +
    "\002\000\004\056\061\001\002\000\004\051\062\001\002" +
    "\000\004\005\063\001\002\000\004\021\064\001\002\000" +
    "\004\004\065\001\002\000\004\062\066\001\002\000\004" +
    "\005\067\001\002\000\004\061\070\001\002\000\006\046" +
    "\075\052\073\001\002\000\006\046\176\047\242\001\002" +
    "\000\032\007\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\022" +
    "\uffa2\026\uffa2\027\uffa2\046\uffa2\047\uffa2\050\uffa2\057\uffa2" +
    "\001\002\000\004\061\213\001\002\000\032\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\022\uffa1\026\uffa1\027\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\057\uffa1\001\002\000\004\054" +
    "\076\001\002\000\016\004\106\005\104\006\077\024\105" +
    "\025\102\044\110\001\002\000\040\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\043\uffb9\044\uffb9\055\uffb9\061\uffb9\001" +
    "\002\000\034\030\116\031\130\032\117\033\123\034\122" +
    "\035\115\036\127\037\114\040\124\041\120\042\113\043" +
    "\131\044\126\001\002\000\010\046\uffd0\047\uffd0\057\uffd0" +
    "\001\002\000\040\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\055\uffb8\061\uffb8\001\002\000\004\044" +
    "\205\001\002\000\040\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\055\uffbb\061\uffbb\001\002\000\040" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\055\uffba\061\uffba\001\002\000\036\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\055\201\001\002\000" +
    "\004\055\143\001\002\000\016\004\111\005\104\006\077" +
    "\024\105\025\102\044\uffda\001\002\000\040\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\055\uffbc\061" +
    "\uffbc\001\002\000\036\030\116\031\130\032\117\033\123" +
    "\034\122\035\115\036\127\037\114\040\124\041\120\042" +
    "\113\043\131\044\126\055\uffdf\001\002\000\016\004\uffad" +
    "\005\uffad\006\uffad\024\uffad\025\uffad\044\uffad\001\002\000" +
    "\016\004\uffb0\005\uffb0\006\uffb0\024\uffb0\025\uffb0\044\uffb0" +
    "\001\002\000\016\004\uffb2\005\uffb2\006\uffb2\024\uffb2\025" +
    "\uffb2\044\uffb2\001\002\000\016\004\uffb7\005\uffb7\006\uffb7" +
    "\024\uffb7\025\uffb7\044\uffb7\001\002\000\016\004\uffb5\005" +
    "\uffb5\006\uffb5\024\uffb5\025\uffb5\044\uffb5\001\002\000\016" +
    "\004\uffae\005\uffae\006\uffae\024\uffae\025\uffae\044\uffae\001" +
    "\002\000\016\004\111\005\104\006\077\024\105\025\102" +
    "\044\134\001\002\000\016\004\uffb3\005\uffb3\006\uffb3\024" +
    "\uffb3\025\uffb3\044\uffb3\001\002\000\016\004\uffb4\005\uffb4" +
    "\006\uffb4\024\uffb4\025\uffb4\044\uffb4\001\002\000\016\004" +
    "\uffaf\005\uffaf\006\uffaf\024\uffaf\025\uffaf\044\uffaf\001\002" +
    "\000\036\030\116\031\130\032\117\033\123\034\122\035" +
    "\115\036\127\037\114\040\124\041\120\042\113\043\131" +
    "\044\126\055\uffde\001\002\000\016\004\uffab\005\uffab\006" +
    "\uffab\024\uffab\025\uffab\044\uffab\001\002\000\016\004\uffb1" +
    "\005\uffb1\006\uffb1\024\uffb1\025\uffb1\044\uffb1\001\002\000" +
    "\016\004\uffb6\005\uffb6\006\uffb6\024\uffb6\025\uffb6\044\uffb6" +
    "\001\002\000\016\004\uffac\005\uffac\006\uffac\024\uffac\025" +
    "\uffac\044\uffac\001\002\000\016\004\111\005\104\006\077" +
    "\024\105\025\102\044\134\001\002\000\040\030\uffaa\031" +
    "\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\055\uffaa\061" +
    "\uffaa\001\002\000\016\004\uffda\005\uffda\006\uffda\024\uffda" +
    "\025\uffda\044\uffda\001\002\000\016\004\111\005\104\006" +
    "\077\024\105\025\102\044\137\001\002\000\040\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037" +
    "\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\055\uffa9" +
    "\061\uffa9\001\002\000\016\004\uffdb\005\uffdb\006\uffdb\024" +
    "\uffdb\025\uffdb\044\uffdb\001\002\000\040\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\055\uffa8\061\uffa8" +
    "\001\002\000\016\004\111\005\104\006\077\024\105\025" +
    "\102\044\137\001\002\000\040\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\055\uffa7\061\uffa7\001\002" +
    "\000\004\056\144\001\002\000\006\022\147\046\075\001" +
    "\002\000\006\046\176\057\uffcb\001\002\000\004\057\175" +
    "\001\002\000\004\020\150\001\002\000\004\023\151\001" +
    "\002\000\004\054\152\001\002\000\006\004\046\006\050" +
    "\001\002\000\004\055\154\001\002\000\004\061\155\001" +
    "\002\000\006\022\157\057\uffcc\001\002\000\006\022\166" +
    "\057\uffcd\001\002\000\004\020\160\001\002\000\004\023" +
    "\161\001\002\000\004\054\162\001\002\000\006\004\046" +
    "\006\050\001\002\000\004\055\164\001\002\000\004\061" +
    "\165\001\002\000\006\022\uffc5\057\uffc5\001\002\000\004" +
    "\020\167\001\002\000\004\023\170\001\002\000\004\054" +
    "\171\001\002\000\006\004\046\006\050\001\002\000\004" +
    "\055\173\001\002\000\004\061\174\001\002\000\006\022" +
    "\uffc6\057\uffc6\001\002\000\010\046\uffcf\047\uffcf\057\uffcf" +
    "\001\002\000\004\054\177\001\002\000\016\004\106\005" +
    "\104\006\077\024\105\025\102\044\110\001\002\000\010" +
    "\046\uffd1\047\uffd1\057\uffd1\001\002\000\004\056\202\001" +
    "\002\000\006\022\147\046\075\001\002\000\004\057\204" +
    "\001\002\000\010\046\uffce\047\uffce\057\uffce\001\002\000" +
    "\016\004\111\005\104\006\077\024\105\025\102\044\uffdb" +
    "\001\002\000\036\030\116\031\130\032\117\033\123\034" +
    "\122\035\115\036\127\037\114\040\124\041\120\042\113" +
    "\043\131\044\126\055\uffdd\001\002\000\036\030\116\031" +
    "\130\032\117\033\123\034\122\035\115\036\127\037\114" +
    "\040\124\041\120\042\113\043\131\044\126\055\uffdc\001" +
    "\002\000\014\004\111\005\104\006\077\024\105\025\102" +
    "\001\002\000\036\030\116\031\130\032\117\033\123\034" +
    "\122\035\115\036\127\037\114\040\124\041\120\042\113" +
    "\043\131\044\126\055\uffe0\001\002\000\036\030\116\031" +
    "\130\032\117\033\123\034\122\035\115\036\127\037\114" +
    "\040\124\041\120\042\113\043\131\044\126\055\uffe1\001" +
    "\002\000\004\051\214\001\002\000\004\005\215\001\002" +
    "\000\004\021\216\001\002\000\004\004\217\001\002\000" +
    "\004\062\220\001\002\000\004\005\221\001\002\000\004" +
    "\061\222\001\002\000\006\046\075\051\226\001\002\000" +
    "\006\046\176\047\242\001\002\000\032\007\uff9e\010\uff9e" +
    "\011\uff9e\012\uff9e\013\uff9e\022\uff9e\026\uff9e\027\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\057\uff9e\001\002\000\032\007\uff9f" +
    "\010\uff9f\011\uff9f\012\uff9f\013\uff9f\022\uff9f\026\uff9f\027" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\057\uff9f\001\002\000\004" +
    "\005\227\001\002\000\004\021\230\001\002\000\004\004" +
    "\231\001\002\000\004\062\232\001\002\000\004\005\233" +
    "\001\002\000\004\061\234\001\002\000\006\046\075\053" +
    "\235\001\002\000\004\021\277\001\002\000\006\046\176" +
    "\047\242\001\002\000\004\057\241\001\002\000\004\057" +
    "\uff9a\001\002\000\032\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\022\uff9c\026\uff9c\027\uff9c\046\uff9c\047\uff9c\050" +
    "\uff9c\057\uff9c\001\002\000\004\054\275\001\002\000\006" +
    "\047\244\053\235\001\002\000\004\054\246\001\002\000" +
    "\004\057\uff9b\001\002\000\016\004\250\005\104\006\077" +
    "\024\105\025\102\044\110\001\002\000\014\047\uffca\051" +
    "\uffca\052\uffca\053\uffca\057\uffca\001\002\000\036\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\055\271" +
    "\001\002\000\004\055\252\001\002\000\004\056\253\001" +
    "\002\000\010\022\255\046\075\047\242\001\002\000\006" +
    "\046\176\047\242\001\002\000\004\020\261\001\002\000" +
    "\004\057\260\001\002\000\006\047\244\057\uffd2\001\002" +
    "\000\014\047\uffc8\051\uffc8\052\uffc8\053\uffc8\057\uffc8\001" +
    "\002\000\004\023\262\001\002\000\004\054\263\001\002" +
    "\000\006\004\046\006\050\001\002\000\004\055\265\001" +
    "\002\000\004\061\266\001\002\000\006\022\157\057\uffd4" +
    "\001\002\000\006\022\166\057\uffd5\001\002\000\006\047" +
    "\244\057\uffd3\001\002\000\004\056\272\001\002\000\010" +
    "\022\255\046\075\047\242\001\002\000\004\057\274\001" +
    "\002\000\014\047\uffc7\051\uffc7\052\uffc7\053\uffc7\057\uffc7" +
    "\001\002\000\016\004\250\005\104\006\077\024\105\025" +
    "\102\044\110\001\002\000\014\047\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\057\uffc9\001\002\000\004\022\300\001\002\000" +
    "\004\020\301\001\002\000\004\023\302\001\002\000\004" +
    "\054\303\001\002\000\006\004\046\006\050\001\002\000" +
    "\004\055\305\001\002\000\004\061\306\001\002\000\004" +
    "\057\uff99\001\002\000\006\047\244\051\226\001\002\000" +
    "\032\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\022\uff9d" +
    "\026\uff9d\027\uff9d\046\uff9d\047\uff9d\050\uff9d\057\uff9d\001" +
    "\002\000\006\047\244\052\073\001\002\000\032\007\uffa0" +
    "\010\uffa0\011\uffa0\012\uffa0\013\uffa0\022\uffa0\026\uffa0\027" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\057\uffa0\001\002\000\006" +
    "\061\314\062\315\001\002\000\032\007\ufff5\010\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\022\ufff5\026\ufff5\027\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\057\ufff5\001\002\000\020\004\322\005" +
    "\320\006\077\024\321\025\102\044\323\045\325\001\002" +
    "\000\034\030\116\031\130\032\117\033\123\034\122\035" +
    "\115\036\127\037\114\040\124\041\120\042\113\043\131" +
    "\044\126\001\002\000\004\061\334\001\002\000\036\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\061" +
    "\uffc4\001\002\000\036\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\061\uffc3\001\002\000\036\030\uffbc" +
    "\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\061\uffc2" +
    "\001\002\000\014\004\111\005\104\006\077\024\105\025" +
    "\102\001\002\000\004\061\332\001\002\000\006\004\326" +
    "\005\327\001\002\000\004\045\331\001\002\000\004\045" +
    "\330\001\002\000\004\061\uffc0\001\002\000\004\061\uffc1" +
    "\001\002\000\032\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\022\ufff4\026\ufff4\027\ufff4\046\ufff4\047\ufff4\050\ufff4" +
    "\057\ufff4\001\002\000\004\061\uffbd\001\002\000\032\007" +
    "\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\022\ufff3\026\ufff3" +
    "\027\ufff3\046\ufff3\047\ufff3\050\ufff3\057\ufff3\001\002\000" +
    "\014\004\111\005\104\006\077\024\105\025\102\001\002" +
    "\000\036\030\116\031\130\032\117\033\123\034\122\035" +
    "\115\036\127\037\114\040\124\041\120\042\113\043\131" +
    "\044\126\061\uffbe\001\002\000\036\030\116\031\130\032" +
    "\117\033\123\034\122\035\115\036\127\037\114\040\124" +
    "\041\120\042\113\043\131\044\126\061\uffbf\001\002\000" +
    "\032\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\022\ufff7" +
    "\026\ufff7\027\ufff7\046\ufff7\047\ufff7\050\ufff7\057\ufff7\001" +
    "\002\000\006\002\ufff9\016\ufff9\001\002\000\016\004\343" +
    "\005\104\006\077\024\105\025\102\044\110\001\002\000" +
    "\036\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\055\364\001\002\000\004\055\346\001\002\000\032" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\022\uffe7\026" +
    "\uffe7\027\uffe7\046\uffe7\047\uffe7\050\uffe7\057\uffe7\001\002" +
    "\000\004\056\347\001\002\000\006\022\352\046\075\001" +
    "\002\000\010\046\176\047\242\057\uffd6\001\002\000\004" +
    "\057\362\001\002\000\004\020\353\001\002\000\004\023" +
    "\354\001\002\000\004\054\355\001\002\000\006\004\046" +
    "\006\050\001\002\000\004\055\357\001\002\000\004\061" +
    "\360\001\002\000\006\022\157\057\uffd8\001\002\000\006" +
    "\022\166\057\uffd9\001\002\000\032\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\022\uffe5\026\uffe5\027\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\057\uffe5\001\002\000\006\047\244\057" +
    "\uffd7\001\002\000\004\056\365\001\002\000\006\022\352" +
    "\046\075\001\002\000\004\057\367\001\002\000\032\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\022\uffe4\026\uffe4" +
    "\027\uffe4\046\uffe4\047\uffe4\050\uffe4\057\uffe4\001\002\000" +
    "\016\004\372\005\104\006\077\024\105\025\102\044\110" +
    "\001\002\000\032\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013" +
    "\uffe6\022\uffe6\026\uffe6\027\uffe6\046\uffe6\047\uffe6\050\uffe6" +
    "\057\uffe6\001\002\000\036\030\uffbc\031\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\055\u0100\001\002\000\004\055" +
    "\374\001\002\000\004\056\375\001\002\000\010\022\255" +
    "\046\075\047\242\001\002\000\004\057\377\001\002\000" +
    "\032\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\022\uffe3" +
    "\026\uffe3\027\uffe3\046\uffe3\047\uffe3\050\uffe3\057\uffe3\001" +
    "\002\000\004\056\u0101\001\002\000\010\022\255\046\075" +
    "\047\242\001\002\000\004\057\u0103\001\002\000\032\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\022\uffe2\026\uffe2" +
    "\027\uffe2\046\uffe2\047\uffe2\050\uffe2\057\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\010\042\010\043\007\044\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\020\001\001\000\016\002\027\012\034\021\036" +
    "\022\040\045\026\046\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\027\012\034\021\036\022\040\046" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\071\014\073\032\070\001\001" +
    "\000\004\036\310\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\005\077" +
    "\025\106\026\102\033\100\001\001\000\002\001\001\000" +
    "\004\006\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\111\001\001" +
    "\000\002\001\001\000\006\006\120\010\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\137\026\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\132\026\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\144" +
    "\034\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\077\025\106\026\102\033\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\144\034\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\205" +
    "\001\001\000\006\006\120\010\206\001\001\000\004\006" +
    "\131\001\001\000\004\005\210\001\001\000\006\006\120" +
    "\010\211\001\001\000\004\006\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\224\016\223\032\222\001\001\000\004\036\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\236\020" +
    "\237\032\235\001\001\000\002\001\001\000\004\036\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\077\025\250\026" +
    "\102\037\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\030\255\032" +
    "\253\036\256\001\001\000\004\036\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\272\032\253\036\256\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\077\025\250" +
    "\026\102\037\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\303\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\307\001\001\000\002" +
    "\001\001\000\004\014\311\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\323\004\316" +
    "\005\315\001\001\000\004\006\334\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\335\001\001\000\006\006\120" +
    "\010\336\001\001\000\004\006\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\077\023\344\025\343" +
    "\026\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\350\032\347" +
    "\001\001\000\004\036\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\355\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\365\032" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\077\024\370\025\372\026\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\375\032\253\036\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\u0101" +
    "\032\253\036\256\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoStatpy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoStatpy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoStatpy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    String tmp="";
    String opr="";


//Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultadosSP = new ArrayList<String>();

//Lista para almacenar resultados traducidos
    public ArrayList<String> translationResults = new ArrayList<>();

// Para retornar resultados traducidos
  public ArrayList<String> getTranslationResults() {
        return translationResults;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoStatpy$actions {
  private final SintacticoStatpy parser;

  /** Constructor */
  CUP$SintacticoStatpy$actions(SintacticoStatpy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatpy$do_action_part00000000(
    int                        CUP$SintacticoStatpy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatpy$parser,
    java.util.Stack            CUP$SintacticoStatpy$stack,
    int                        CUP$SintacticoStatpy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoStatpy$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoStatpy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoStatpy$parser.done_parsing();
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		
                    System.out.println(tmp);
                    tmp="";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INICIO",32, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS S 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= comentario 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= comentario2 
            {
              Object RESULT =null;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com2+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;

                       
         tmp+="def" + " " + mai + "(";
                    
    
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$0",38, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;

                    tmp+=")"+":\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$1",39, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= VOI MAIN PAR_A NT$0 PAR_C LLAV_A NT$1 CUERPO LLAV_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		
                    tmp+="if__name__ = “__main__”:\n" + " " + mai + "()";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("S",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L ::= TIPO ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=tip+" "+id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("L",37, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= CUERPO C 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPO",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= C 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPO",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // C ::= TIPO ID PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // C ::= TIPO ID ASIGNA EXPRESION PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    tmp+=id+" "+"="+" "+exp+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // C ::= TIPO ID ASIGNA OPERACION PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    tmp+=id+" "+"="+" "+opr;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              Object RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    tmp+="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= IFSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= ELIFSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C ::= SWITCHSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= comentario 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= comentario2 
            {
              Object RESULT =null;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com2+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TIPO ::= INT1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPO ::= CHAR1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO ::= DOUBLE1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO ::= BOOL1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO ::= STRING1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFSTATE ::= IF PAR_A IFARG 
            {
              String RESULT =null;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp += ifpy + " " + arg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFSTATE",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ELIFSTATE ::= ELSEIF PAR_A ELIFARG 
            {
              String RESULT =null;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp += "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFSTATE",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IFARG ::= OPERIFS PAR_C LLAV_A CUERPOIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                     "   " + cuerpoif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARG",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IFARG ::= ID PAR_C LLAV_A CUERPOIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" +
                      "   " + cuerpoif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARG",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ELIFARG ::= OPERIFS PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                       "   " + cuerpoelif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFARG",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ELIFARG ::= ID PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" + 
                       "   " + cuerpoelif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFARG",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERIFS ::= OP SIGNO OP TERMINO 
            {
              String RESULT =null;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signo2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signo2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op4 + " " + signo2 + " " + op5 + " " +term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERIFS ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op1 + " " + signo + " " + op2;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERIFS ::= NOT OP 
            {
              String RESULT =null;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  " " + "not" + " " + op3;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERIFS ::= NOT OP TERMINO 
            {
              String RESULT =null;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  " " + "not" + " " + op4 + " " + term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERIFS ::= SUPERNOT NOT OP 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  supernot + " " + "not" + " " + op5;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERIFS ::= SUPERNOT NOT OP TERMINO 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int op6left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op6right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op6 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  supernot + " " + "not" + " " + op6 + " " + term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SUPERNOT ::= SUPERNOT NOT 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
             RESULT= supernot + " " + "not";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SUPERNOT",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SUPERNOT ::= NOT 
            {
              String RESULT =null;
		
             RESULT= " " + "not";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SUPERNOT",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUERPOIF ::= MOREIFS MORELIFS 
            {
              String RESULT =null;
		int ifstate1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifstate1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifstate1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=ifstate1 + "   " + elif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUERPOIF ::= MOREIFS 
            {
              String RESULT =null;
		int ifstateleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifstateright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifstate = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=ifstate;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                +  print3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUERPOELIF ::= MOREIFS MORELIFS 
            {
              String RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "      " + ifs + "   " + elifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUERPOELIF ::= MORELIFS 
            {
              String RESULT =null;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                   RESULT=elifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MOREIFS ::= MOREIFS IF PAR_A IFARGIF 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int ifargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifarg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= moreifs + "   " + ifpy + " " + ifarg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREIFS",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MOREIFS ::= IF PAR_A IFARGIF 
            {
              String RESULT =null;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int ifargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifarg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  ifpy + " " + ifarg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREIFS",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IFARGIF ::= OPERIFS PAR_C LLAV_A IFCUERPOIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int ifcuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifcuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifcuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                     "   " + ifcuerpoif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGIF",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IFARGIF ::= ID PAR_C LLAV_A IFCUERPOIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int ifcuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifcuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifcuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" +
                      "    " + ifcuerpoif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGIF",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "   " + "print("+varprint+")\n"
                                +  print3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "      " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IFCUERPOIF ::= MOREIFS 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "   " + moreifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MORELIFS ::= MORELIFS ELSEIF PAR_A IFARGELIF 
            {
              String RESULT =null;
		int morelifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int morelifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String morelifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  morelifs + "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MORELIFS",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MORELIFS ::= ELSEIF PAR_A IFARGELIF 
            {
              String RESULT =null;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MORELIFS",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFARGELIF ::= OPERIFS PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                       "      " + cuerpoelif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGELIF",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFARGELIF ::= ID PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" + 
                       "      " + cuerpoelif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGELIF",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MOREPRINTS ::= MOREPRINTS CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int moreprintsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int moreprintsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String moreprints = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= moreprints + "   " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREPRINTS",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MOREPRINTS ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "   " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREPRINTS",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= ENTERO 
            {
              String RESULT =null;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= DOUBLE 
            {
              String RESULT =null;
		int dbleleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int dbleright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dble = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dble;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= COMILLA_S ID COMILLA_S 
            {
              String RESULT =null;
		int cs1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cs1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int cs2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cs2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cs2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cs1 + id + cs2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= COMILLA_S ENTERO COMILLA_S 
            {
              String RESULT =null;
		int cs3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cs3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cs3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int cs4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cs4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cs4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cs3 + nume + cs4;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OPERACION ::= OP SIGNO OP TERMINO 
            {
              String RESULT =null;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT  = op3 + " " + signo + " " + op4 + " " + term +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPERACION ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signo1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signo1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  
                    RESULT = op1  + " " + signo1 + " " + op2 +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPERACION ::= NOT OP 
            {
              String RESULT =null;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  
                    RESULT = "not" +  " "  + op5  +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP ::= ENTERO 
            {
              String RESULT =null;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP ::= DOUBLE 
            {
              String RESULT =null;
		int dbleleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int dbleright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dble = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dble;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dec;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SIGNO ::= SUMA 
            {
              String RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=sum;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SIGNO ::= RESTA 
            {
              String RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String resta = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=resta;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SIGNO ::= MULT 
            {
              String RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mult = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mult;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SIGNO ::= DIV 
            {
              String RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=div;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SIGNO ::= MAYOR 
            {
              String RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mayor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mayor;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SIGNO ::= MENOR 
            {
              String RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String menor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=menor;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SIGNO ::= MAYOR_I 
            {
              String RESULT =null;
		int mayorileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int mayoriright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mayori = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mayori;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SIGNO ::= MENOR_I 
            {
              String RESULT =null;
		int menorileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int menoriright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String menori = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=menori;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SIGNO ::= IGUAL 
            {
              String RESULT =null;
		int iguleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int iguright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String igu = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=igu;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SIGNO ::= DIST 
            {
              String RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int distright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dist = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dist;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SIGNO ::= AND 
            {
              String RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="and";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SIGNO ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="or";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SIGNO ::= NOT 
            {
              String RESULT =null;
		
                    RESULT="not";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TERMINO ::= TERMINO SIGNO OP 
            {
              String RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= term + " " + signo + "  " + op;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TERMINO ::= TERMINO SIGNO SUPERNOT OP 
            {
              String RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int not1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int not1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String not1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= term + " " + signo + "  " + not1 + "  " + op1;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TERMINO ::= SIGNO OP 
            {
              String RESULT =null;
		int signo2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signo2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= signo2 + "  " + op2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TERMINO ::= SIGNO SUPERNOT OP 
            {
              String RESULT =null;
		int signo3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signo3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= signo3 + "  " + not + "  " + op3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARPRINT ::= CADENA SUMA ID 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad + ", " + id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARPRINT ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARPRINT ::= CADENA SUMA ENTERO 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad + ", " + nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARPRINT ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SWITCHSTATE ::= SWITCH PAR_A ID PAR_C LLAV_A CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF 
            {
              String RESULT =null;
		int switleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int switright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String swit = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int enu1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "\n" +  switchif + "\n"; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHSTATE",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SWITCHSTATE ::= SWITCH PAR_A ID PAR_C LLAV_A CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA CASE1 
            {
              String RESULT =null;
		int switleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int switright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String swit = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int enu1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "," + "\n"  
                                                        + caso; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHSTATE",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SWITCHIF ::= MOREIFS MORELIFS CASE1 
            {
              String RESULT =null;
		int ifstate1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT = "        " + ifstate1 + "        " + elif + "," + case1;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CASE1 ::= BREAK PYCOMA CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF2 
            {
              String RESULT =null;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + switchif; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE1",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASE1 ::= BREAK PYCOMA CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA CASE2 
            {
              String RESULT =null;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int case2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + case2; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE1",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SWITCHIF2 ::= MOREIFS MORELIFS CASE2 
            {
              String RESULT =null;
		int ifstate2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int case2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT = "        " + ifstate2 + "        " + elif + "," + case2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF2",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE2 ::= CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF3 LLAV_C 
            {
              String RESULT =null;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int id4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int id4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int enu4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int enu4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String enu4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                  RESULT = "      " + enu3 + ": " + id4 + " = " + enu4 + "," + "\n" + switchif + 
                                                  "     " + "}\n"; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE2",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SWITCHIF3 ::= MOREIFS MORELIFS CASED 
            {
              String RESULT =null;
		int ifstate3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int casedleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casedright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cased = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                RESULT = "        " + ifstate3 + "        " + elif + "," + cased;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF3",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SWITCHIF3 ::= CASED 
            {
              String RESULT =null;
		int casedleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casedright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cased = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 
                RESULT = cased;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF3",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASED ::= DEFAULT DOSP CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "      " + "4: " + "print("+varprint+"),\n";
                                
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASED",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoStatpy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatpy$do_action(
    int                        CUP$SintacticoStatpy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatpy$parser,
    java.util.Stack            CUP$SintacticoStatpy$stack,
    int                        CUP$SintacticoStatpy$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoStatpy$do_action_part00000000(
                               CUP$SintacticoStatpy$act_num,
                               CUP$SintacticoStatpy$parser,
                               CUP$SintacticoStatpy$stack,
                               CUP$SintacticoStatpy$top);
    }
}

}
