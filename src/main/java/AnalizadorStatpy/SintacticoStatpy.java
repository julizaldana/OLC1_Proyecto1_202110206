
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorStatpy;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import ReportesHtml.ReporteErrorSp;
import GraficasJava.*;
import AnalizadorJson.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoStatpy extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoStatpy() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoStatpy(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoStatpy(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\252\000\002\002\004\000\002\067\003\000\002\070" +
    "\004\000\002\070\003\000\002\070\003\000\002\070\003" +
    "\000\002\075\002\000\002\076\002\000\002\071\014\000" +
    "\002\011\003\000\002\011\003\000\002\011\002\000\002" +
    "\074\004\000\002\072\004\000\002\072\003\000\002\073" +
    "\005\000\002\073\007\000\002\073\007\000\002\073\011" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\004\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\021\005\000" +
    "\002\022\005\000\002\023\007\000\002\023\007\000\002" +
    "\024\007\000\002\024\007\000\002\025\006\000\002\025" +
    "\005\000\002\025\004\000\002\025\005\000\002\025\005" +
    "\000\002\025\006\000\002\026\004\000\002\026\003\000" +
    "\002\027\012\000\002\027\011\000\002\027\004\000\002" +
    "\027\003\000\002\030\012\000\002\030\011\000\002\030" +
    "\004\000\002\030\003\000\002\030\015\000\002\032\006" +
    "\000\002\032\005\000\002\033\007\000\002\033\007\000" +
    "\002\034\012\000\002\034\011\000\002\034\003\000\002" +
    "\034\012\000\002\036\006\000\002\036\005\000\002\037" +
    "\007\000\002\037\007\000\002\041\012\000\002\041\011" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\005\000\002\004\006\000\002" +
    "\004\005\000\002\004\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\010\005\000\002\010\006\000\002\010\004\000" +
    "\002\010\005\000\002\007\005\000\002\007\003\000\002" +
    "\007\005\000\002\007\003\000\002\012\017\000\002\012" +
    "\017\000\002\013\005\000\002\014\014\000\002\014\014" +
    "\000\002\015\005\000\002\016\013\000\002\017\005\000" +
    "\002\017\003\000\002\020\013\000\002\042\022\000\002" +
    "\044\012\000\002\044\011\000\002\044\003\000\002\044" +
    "\012\000\002\045\023\000\002\045\022\000\002\043\005" +
    "\000\002\046\017\000\002\046\012\000\002\055\011\000" +
    "\002\047\012\000\002\047\011\000\002\047\003\000\002" +
    "\050\017\000\002\050\012\000\002\051\021\000\002\053" +
    "\010\000\002\052\012\000\002\052\011\000\002\052\012" +
    "\000\002\054\004\000\002\056\010\000\002\057\010\000" +
    "\002\060\010\000\002\061\005\000\002\061\004\000\002" +
    "\077\002\000\002\062\007\000\002\100\002\000\002\062" +
    "\007\000\002\062\012\000\002\062\012\000\002\101\002" +
    "\000\002\062\007\000\002\102\002\000\002\062\007\000" +
    "\002\103\002\000\002\062\007\000\002\104\002\000\002" +
    "\062\007\000\002\105\002\000\002\062\007\000\002\106" +
    "\002\000\002\062\016\000\002\107\002\000\002\062\007" +
    "\000\002\063\005\000\002\063\003\000\002\064\005\000" +
    "\002\064\003\000\002\065\003\000\002\065\003\000\002" +
    "\066\003\000\002\066\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f2\000\010\016\007\026\005\027\004\001\002\000" +
    "\006\002\ufffc\016\ufffc\001\002\000\006\002\ufffd\016\ufffd" +
    "\001\002\000\006\002\ufffe\016\ufffe\001\002\000\004\017" +
    "\014\001\002\000\006\002\000\016\007\001\002\000\004" +
    "\002\012\001\002\000\004\002\001\001\002\000\006\002" +
    "\uffff\016\uffff\001\002\000\004\073\015\001\002\000\004" +
    "\074\ufffb\001\002\000\004\074\017\001\002\000\004\075" +
    "\020\001\002\000\042\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\022\ufffa\026\ufffa\027\ufffa\046\ufffa\047\ufffa\050" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\070\ufffa\071\ufffa\001\002" +
    "\000\042\007\041\010\052\011\053\012\022\013\043\022" +
    "\031\026\047\027\026\046\024\047\050\050\054\062\034" +
    "\063\044\064\032\070\051\071\030\001\002\000\014\004" +
    "\uffe1\053\uffe1\054\uffe1\055\uffe1\060\uffe1\001\002\000\004" +
    "\007\u01d4\001\002\000\004\073\u01cf\001\002\000\044\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\022\uffe8\026\uffe8" +
    "\027\uffe8\046\uffe8\047\uffe8\050\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\070\uffe8\071\uffe8\076\uffe8\001\002\000\044\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\022\uffe5\026\uffe5\027" +
    "\uffe5\046\uffe5\047\uffe5\050\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\070\uffe5\071\uffe5\076\uffe5\001\002\000\044\007\041\010" +
    "\052\011\053\012\022\013\043\022\031\026\047\027\026" +
    "\046\024\047\050\050\054\062\034\063\044\064\032\070" +
    "\051\071\030\076\u01ca\001\002\000\004\073\u01bc\001\002" +
    "\000\004\020\u01b6\001\002\000\004\073\u0182\001\002\000" +
    "\044\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\022\uffea" +
    "\026\uffea\027\uffea\046\uffea\047\uffea\050\uffea\062\uffea\063" +
    "\uffea\064\uffea\070\uffea\071\uffea\076\uffea\001\002\000\004" +
    "\073\u016c\001\002\000\044\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\022\uffec\026\uffec\027\uffec\046\uffec\047\uffec" +
    "\050\uffec\062\uffec\063\uffec\064\uffec\070\uffec\071\uffec\076" +
    "\uffec\001\002\000\004\004\u0157\001\002\000\044\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\022\uffee\026\uffee\027" +
    "\uffee\046\uffee\047\uffee\050\uffee\062\uffee\063\uffee\064\uffee" +
    "\070\uffee\071\uffee\076\uffee\001\002\000\044\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\022\uffe9\026\uffe9\027\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\062\uffe9\063\uffe9\064\uffe9\070" +
    "\uffe9\071\uffe9\076\uffe9\001\002\000\014\004\uffe4\053\uffe4" +
    "\054\uffe4\055\uffe4\060\uffe4\001\002\000\044\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\022\ufff3\026\ufff3\027\ufff3" +
    "\046\ufff3\047\ufff3\050\ufff3\062\ufff3\063\ufff3\064\ufff3\070" +
    "\ufff3\071\ufff3\076\ufff3\001\002\000\014\004\uffe0\053\uffe0" +
    "\054\uffe0\055\uffe0\060\uffe0\001\002\000\004\073\336\001" +
    "\002\000\044\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\022\uffed\026\uffed\027\uffed\046\uffed\047\uffed\050\uffed\062" +
    "\uffed\063\uffed\064\uffed\070\uffed\071\uffed\076\uffed\001\002" +
    "\000\044\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\022" +
    "\uffe7\026\uffe7\027\uffe7\046\uffe7\047\uffe7\050\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\070\uffe7\071\uffe7\076\uffe7\001\002\000" +
    "\044\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\022\uffe6" +
    "\026\uffe6\027\uffe6\046\uffe6\047\uffe6\050\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\070\uffe6\071\uffe6\076\uffe6\001\002\000\004" +
    "\073\331\001\002\000\004\073\170\001\002\000\014\004" +
    "\uffe3\053\uffe3\054\uffe3\055\uffe3\060\uffe3\001\002\000\014" +
    "\004\uffe2\053\uffe2\054\uffe2\055\uffe2\060\uffe2\001\002\000" +
    "\004\073\055\001\002\000\004\074\056\001\002\000\004" +
    "\075\057\001\002\000\014\007\041\010\052\011\053\012" +
    "\022\013\043\001\002\000\016\007\041\010\052\011\053" +
    "\012\022\013\043\076\166\001\002\000\014\004\062\053" +
    "\063\054\064\055\065\060\066\001\002\000\004\101\144" +
    "\001\002\000\004\101\135\001\002\000\004\101\126\001" +
    "\002\000\004\101\117\001\002\000\004\061\070\001\002" +
    "\000\016\007\uff74\010\uff74\011\uff74\012\uff74\013\uff74\076" +
    "\uff74\001\002\000\006\051\072\052\071\001\002\000\004" +
    "\101\105\001\002\000\004\101\073\001\002\000\004\075" +
    "\074\001\002\000\006\004\075\006\100\001\002\000\006" +
    "\076\uff5a\077\uff5a\001\002\000\006\076\102\077\101\001" +
    "\002\000\006\076\uff5e\077\uff5e\001\002\000\006\076\uff5b" +
    "\077\uff5b\001\002\000\006\004\075\006\100\001\002\000" +
    "\004\100\103\001\002\000\016\007\uff6f\010\uff6f\011\uff6f" +
    "\012\uff6f\013\uff6f\076\uff6f\001\002\000\006\076\uff5f\077" +
    "\uff5f\001\002\000\004\075\106\001\002\000\006\004\107" +
    "\024\111\001\002\000\006\076\uff58\077\uff58\001\002\000" +
    "\006\076\uff5c\077\uff5c\001\002\000\006\076\uff59\077\uff59" +
    "\001\002\000\006\076\114\077\113\001\002\000\006\004" +
    "\107\024\111\001\002\000\004\100\115\001\002\000\016" +
    "\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\076\uff6e\001" +
    "\002\000\006\076\uff5d\077\uff5d\001\002\000\006\004\120" +
    "\006\121\001\002\000\004\100\uff6b\001\002\000\004\100" +
    "\uff6d\001\002\000\004\100\123\001\002\000\016\007\uff6c" +
    "\010\uff6c\011\uff6c\012\uff6c\013\uff6c\076\uff6c\001\002\000" +
    "\004\100\125\001\002\000\016\007\uff6a\010\uff6a\011\uff6a" +
    "\012\uff6a\013\uff6a\076\uff6a\001\002\000\006\004\127\006" +
    "\130\001\002\000\004\100\uff67\001\002\000\004\100\uff69" +
    "\001\002\000\004\100\132\001\002\000\016\007\uff68\010" +
    "\uff68\011\uff68\012\uff68\013\uff68\076\uff68\001\002\000\004" +
    "\100\134\001\002\000\016\007\uff66\010\uff66\011\uff66\012" +
    "\uff66\013\uff66\076\uff66\001\002\000\006\004\136\006\137" +
    "\001\002\000\004\100\uff71\001\002\000\004\100\uff73\001" +
    "\002\000\004\100\141\001\002\000\016\007\uff72\010\uff72" +
    "\011\uff72\012\uff72\013\uff72\076\uff72\001\002\000\004\100" +
    "\143\001\002\000\016\007\uff70\010\uff70\011\uff70\012\uff70" +
    "\013\uff70\076\uff70\001\002\000\010\006\147\024\146\057" +
    "\145\001\002\000\004\075\154\001\002\000\004\100\uff61" +
    "\001\002\000\004\100\uff65\001\002\000\004\100\151\001" +
    "\002\000\016\007\uff64\010\uff64\011\uff64\012\uff64\013\uff64" +
    "\076\uff64\001\002\000\004\100\153\001\002\000\016\007" +
    "\uff60\010\uff60\011\uff60\012\uff60\013\uff60\076\uff60\001\002" +
    "\000\004\045\155\001\002\000\004\077\156\001\002\000" +
    "\004\006\157\001\002\000\004\077\160\001\002\000\004" +
    "\006\161\001\002\000\004\076\162\001\002\000\004\100" +
    "\uff63\001\002\000\004\100\164\001\002\000\016\007\uff62" +
    "\010\uff62\011\uff62\012\uff62\013\uff62\076\uff62\001\002\000" +
    "\014\004\062\053\063\054\064\055\065\060\066\001\002" +
    "\000\044\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\022" +
    "\uff76\026\uff76\027\uff76\046\uff76\047\uff76\050\uff76\062\uff76" +
    "\063\uff76\064\uff76\070\uff76\071\uff76\076\uff76\001\002\000" +
    "\016\007\uff75\010\uff75\011\uff75\012\uff75\013\uff75\076\uff75" +
    "\001\002\000\014\007\041\010\052\011\053\012\022\013" +
    "\043\001\002\000\004\004\172\001\002\000\004\101\173" +
    "\001\002\000\004\005\174\001\002\000\004\100\175\001" +
    "\002\000\014\004\177\005\203\006\204\024\200\025\202" +
    "\001\002\000\034\030\314\031\326\032\316\033\321\034" +
    "\322\035\315\036\325\037\313\040\323\041\317\042\312" +
    "\043\327\044\324\001\002\000\040\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\074\uffb2\100\uffb2\001" +
    "\002\000\040\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\074\uffb0\100\uffb0\001\002\000\004\100\205" +
    "\001\002\000\040\030\uffae\031\uffae\032\uffae\033\uffae\034" +
    "\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae" +
    "\043\uffae\044\uffae\074\uffae\100\uffae\001\002\000\040\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\074" +
    "\uffb1\100\uffb1\001\002\000\040\030\uffaf\031\uffaf\032\uffaf" +
    "\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\074\uffaf\100\uffaf\001\002" +
    "\000\004\004\206\001\002\000\004\030\207\001\002\000" +
    "\004\030\210\001\002\000\004\074\211\001\002\000\004" +
    "\075\212\001\002\000\006\022\215\070\213\001\002\000" +
    "\004\073\273\001\002\000\006\070\253\076\uff8b\001\002" +
    "\000\004\020\220\001\002\000\004\076\217\001\002\000" +
    "\004\007\uff8e\001\002\000\004\023\221\001\002\000\004" +
    "\073\222\001\002\000\006\004\223\006\225\001\002\000" +
    "\004\074\uff99\001\002\000\004\074\231\001\002\000\006" +
    "\030\226\074\uff9b\001\002\000\006\004\227\005\230\001" +
    "\002\000\004\074\uff9c\001\002\000\004\074\uff9a\001\002" +
    "\000\004\100\232\001\002\000\010\022\235\070\213\076" +
    "\uff8c\001\002\000\006\070\253\076\uff8a\001\002\000\006" +
    "\022\244\076\uff8d\001\002\000\004\020\236\001\002\000" +
    "\004\023\237\001\002\000\004\073\240\001\002\000\006" +
    "\004\223\006\225\001\002\000\004\074\242\001\002\000" +
    "\004\100\243\001\002\000\012\004\uffbb\022\uffbb\076\uffbb" +
    "\100\uffbb\001\002\000\004\020\245\001\002\000\004\023" +
    "\246\001\002\000\004\073\247\001\002\000\006\004\223" +
    "\006\225\001\002\000\004\074\251\001\002\000\004\100" +
    "\252\001\002\000\012\004\uffbc\022\uffbc\076\uffbc\100\uffbc" +
    "\001\002\000\004\073\254\001\002\000\014\007\041\010" +
    "\052\011\053\012\022\013\043\001\002\000\004\004\256" +
    "\001\002\000\004\101\257\001\002\000\004\005\260\001" +
    "\002\000\004\100\261\001\002\000\014\004\177\005\203" +
    "\006\204\024\200\025\202\001\002\000\004\100\263\001" +
    "\002\000\004\004\264\001\002\000\004\030\265\001\002" +
    "\000\004\030\266\001\002\000\004\074\267\001\002\000" +
    "\004\075\270\001\002\000\006\022\215\070\213\001\002" +
    "\000\004\076\272\001\002\000\006\070\uff89\076\uff89\001" +
    "\002\000\014\007\041\010\052\011\053\012\022\013\043" +
    "\001\002\000\004\004\275\001\002\000\004\101\276\001" +
    "\002\000\004\005\277\001\002\000\004\100\300\001\002" +
    "\000\014\004\177\005\203\006\204\024\200\025\202\001" +
    "\002\000\004\100\302\001\002\000\004\004\303\001\002" +
    "\000\004\030\304\001\002\000\004\030\305\001\002\000" +
    "\004\074\306\001\002\000\004\075\307\001\002\000\006" +
    "\022\215\070\213\001\002\000\004\076\311\001\002\000" +
    "\006\070\uff88\076\uff88\001\002\000\016\004\uffa3\005\uffa3" +
    "\006\uffa3\024\uffa3\025\uffa3\044\uffa3\001\002\000\016\004" +
    "\uffa6\005\uffa6\006\uffa6\024\uffa6\025\uffa6\044\uffa6\001\002" +
    "\000\016\004\uffad\005\uffad\006\uffad\024\uffad\025\uffad\044" +
    "\uffad\001\002\000\016\004\uffa8\005\uffa8\006\uffa8\024\uffa8" +
    "\025\uffa8\044\uffa8\001\002\000\016\004\uffab\005\uffab\006" +
    "\uffab\024\uffab\025\uffab\044\uffab\001\002\000\016\004\uffa4" +
    "\005\uffa4\006\uffa4\024\uffa4\025\uffa4\044\uffa4\001\002\000" +
    "\014\004\177\005\203\006\204\024\200\025\202\001\002" +
    "\000\016\004\uffaa\005\uffaa\006\uffaa\024\uffaa\025\uffaa\044" +
    "\uffaa\001\002\000\016\004\uffa9\005\uffa9\006\uffa9\024\uffa9" +
    "\025\uffa9\044\uffa9\001\002\000\016\004\uffa5\005\uffa5\006" +
    "\uffa5\024\uffa5\025\uffa5\044\uffa5\001\002\000\016\004\uffa1" +
    "\005\uffa1\006\uffa1\024\uffa1\025\uffa1\044\uffa1\001\002\000" +
    "\016\004\uffa7\005\uffa7\006\uffa7\024\uffa7\025\uffa7\044\uffa7" +
    "\001\002\000\016\004\uffac\005\uffac\006\uffac\024\uffac\025" +
    "\uffac\044\uffac\001\002\000\016\004\uffa2\005\uffa2\006\uffa2" +
    "\024\uffa2\025\uffa2\044\uffa2\001\002\000\004\100\uff87\001" +
    "\002\000\004\074\332\001\002\000\004\075\333\001\002" +
    "\000\014\007\041\010\052\011\053\012\022\013\043\001" +
    "\002\000\016\007\041\010\052\011\053\012\022\013\043" +
    "\076\335\001\002\000\044\007\uff77\010\uff77\011\uff77\012" +
    "\uff77\013\uff77\022\uff77\026\uff77\027\uff77\046\uff77\047\uff77" +
    "\050\uff77\062\uff77\063\uff77\064\uff77\070\uff77\071\uff77\076" +
    "\uff77\001\002\000\016\004\342\005\203\006\204\024\200" +
    "\025\202\044\344\001\002\000\034\030\314\031\326\032" +
    "\316\033\321\034\322\035\315\036\325\037\313\040\323" +
    "\041\317\042\312\043\327\044\324\001\002\000\004\044" +
    "\u0151\001\002\000\044\007\uffde\010\uffde\011\uffde\012\uffde" +
    "\013\uffde\022\uffde\026\uffde\027\uffde\046\uffde\047\uffde\050" +
    "\uffde\062\uffde\063\uffde\064\uffde\070\uffde\071\uffde\076\uffde" +
    "\001\002\000\036\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\074\u014d\001\002\000\004\074\361\001" +
    "\002\000\016\004\177\005\203\006\204\024\200\025\202" +
    "\044\uffd2\001\002\000\036\030\314\031\326\032\316\033" +
    "\321\034\322\035\315\036\325\037\313\040\323\041\317" +
    "\042\312\043\327\044\324\074\uffd7\001\002\000\016\004" +
    "\177\005\203\006\204\024\200\025\202\044\352\001\002" +
    "\000\036\030\314\031\326\032\316\033\321\034\322\035" +
    "\315\036\325\037\313\040\323\041\317\042\312\043\327" +
    "\044\324\074\uffd6\001\002\000\016\004\177\005\203\006" +
    "\204\024\200\025\202\044\352\001\002\000\040\030\uffa0" +
    "\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\074\uffa0" +
    "\100\uffa0\001\002\000\016\004\uffd2\005\uffd2\006\uffd2\024" +
    "\uffd2\025\uffd2\044\uffd2\001\002\000\016\004\177\005\203" +
    "\006\204\024\200\025\202\044\355\001\002\000\040\030" +
    "\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\074" +
    "\uff9f\100\uff9f\001\002\000\016\004\uffd3\005\uffd3\006\uffd3" +
    "\024\uffd3\025\uffd3\044\uffd3\001\002\000\040\030\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e" +
    "\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\074\uff9e\100" +
    "\uff9e\001\002\000\016\004\177\005\203\006\204\024\200" +
    "\025\202\044\355\001\002\000\040\030\uff9d\031\uff9d\032" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\074\uff9d\100\uff9d\001" +
    "\002\000\004\075\362\001\002\000\010\022\366\062\367" +
    "\063\364\001\002\000\006\062\u012f\063\364\001\002\000" +
    "\004\073\u014a\001\002\000\004\076\u0149\001\002\000\004" +
    "\020\u0137\001\002\000\004\073\u0106\001\002\000\006\063" +
    "\371\076\uffca\001\002\000\004\073\372\001\002\000\016" +
    "\004\374\005\203\006\204\024\200\025\202\044\344\001" +
    "\002\000\016\004\uffc0\063\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\076\uffc0\001\002\000\036\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2" +
    "\042\uffb2\043\uffb2\044\uffb2\074\u0102\001\002\000\004\074" +
    "\376\001\002\000\004\075\377\001\002\000\010\022\366" +
    "\062\367\063\364\001\002\000\004\076\u0101\001\002\000" +
    "\016\004\uffbe\063\uffbe\065\uffbe\066\uffbe\067\uffbe\076\uffbe" +
    "\001\002\000\004\075\u0103\001\002\000\010\022\366\062" +
    "\367\063\364\001\002\000\004\076\u0105\001\002\000\016" +
    "\004\uffbd\063\uffbd\065\uffbd\066\uffbd\067\uffbd\076\uffbd\001" +
    "\002\000\016\004\u0108\005\203\006\204\024\200\025\202" +
    "\044\344\001\002\000\014\004\uffc7\062\uffc7\063\uffc7\076" +
    "\uffc7\100\uffc7\001\002\000\036\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\043\uffb2\044\uffb2\074\u0133\001\002\000\004" +
    "\074\u010a\001\002\000\004\075\u010b\001\002\000\006\022" +
    "\u010e\062\367\001\002\000\006\062\u012f\076\uffc2\001\002" +
    "\000\004\076\u0132\001\002\000\004\020\u010f\001\002\000" +
    "\004\023\u0110\001\002\000\004\073\u0111\001\002\000\006" +
    "\004\223\006\225\001\002\000\004\074\u0113\001\002\000" +
    "\004\100\u0114\001\002\000\010\022\235\071\u0117\076\uffc3" +
    "\001\002\000\006\022\244\076\uffc4\001\002\000\004\076" +
    "\uffc1\001\002\000\004\073\u0118\001\002\000\016\004\177" +
    "\005\203\006\204\024\200\025\202\044\344\001\002\000" +
    "\004\074\u011a\001\002\000\004\075\u011b\001\002\000\006" +
    "\022\u011e\062\367\001\002\000\012\004\uff81\062\u012f\076" +
    "\uff81\100\uff81\001\002\000\006\004\u0126\100\u0127\001\002" +
    "\000\004\020\u011f\001\002\000\004\023\u0120\001\002\000" +
    "\004\073\u0121\001\002\000\006\004\223\006\225\001\002" +
    "\000\004\074\u0123\001\002\000\004\100\u0124\001\002\000" +
    "\012\004\uff82\022\235\076\uff82\100\uff82\001\002\000\012" +
    "\004\uff83\022\244\076\uff83\100\uff83\001\002\000\004\101" +
    "\u0129\001\002\000\004\076\u0128\001\002\000\004\076\uff7f" +
    "\001\002\000\004\004\u012a\001\002\000\004\030\u012b\001" +
    "\002\000\004\005\u012c\001\002\000\004\100\u012d\001\002" +
    "\000\004\076\u012e\001\002\000\004\076\uff80\001\002\000" +
    "\004\073\u0130\001\002\000\016\004\u0108\005\203\006\204" +
    "\024\200\025\202\044\344\001\002\000\014\004\uffc8\062" +
    "\uffc8\063\uffc8\076\uffc8\100\uffc8\001\002\000\014\004\uffc6" +
    "\062\uffc6\063\uffc6\076\uffc6\100\uffc6\001\002\000\004\075" +
    "\u0134\001\002\000\006\022\u010e\062\367\001\002\000\004" +
    "\076\u0136\001\002\000\014\004\uffc5\062\uffc5\063\uffc5\076" +
    "\uffc5\100\uffc5\001\002\000\004\023\u0138\001\002\000\004" +
    "\073\u0139\001\002\000\006\004\223\006\225\001\002\000" +
    "\004\074\u013b\001\002\000\004\100\u013c\001\002\000\010" +
    "\007\u013d\022\235\076\uffcc\001\002\000\004\004\u013f\001" +
    "\002\000\006\022\244\076\uffcd\001\002\000\004\100\u0140" +
    "\001\002\000\004\071\u0141\001\002\000\004\073\u0143\001" +
    "\002\000\004\076\uffc9\001\002\000\016\004\177\005\203" +
    "\006\204\024\200\025\202\044\344\001\002\000\004\074" +
    "\u0145\001\002\000\004\075\u0146\001\002\000\006\022\u011e" +
    "\062\367\001\002\000\004\076\u0148\001\002\000\004\076" +
    "\uff84\001\002\000\044\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\013\uffdb\022\uffdb\026\uffdb\027\uffdb\046\uffdb\047\uffdb\050" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\070\uffdb\071\uffdb\076\uffdb" +
    "\001\002\000\016\004\374\005\203\006\204\024\200\025" +
    "\202\044\344\001\002\000\016\004\uffbf\063\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\076\uffbf\001\002\000\006\063\371\076" +
    "\uffcb\001\002\000\004\075\u014e\001\002\000\010\022\366" +
    "\062\367\063\364\001\002\000\004\076\u0150\001\002\000" +
    "\044\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\022\uffda" +
    "\026\uffda\027\uffda\046\uffda\047\uffda\050\uffda\062\uffda\063" +
    "\uffda\064\uffda\070\uffda\071\uffda\076\uffda\001\002\000\016" +
    "\004\177\005\203\006\204\024\200\025\202\044\uffd3\001" +
    "\002\000\036\030\314\031\326\032\316\033\321\034\322" +
    "\035\315\036\325\037\313\040\323\041\317\042\312\043" +
    "\327\044\324\074\uffd5\001\002\000\036\030\314\031\326" +
    "\032\316\033\321\034\322\035\315\036\325\037\313\040" +
    "\323\041\317\042\312\043\327\044\324\074\uffd4\001\002" +
    "\000\014\004\177\005\203\006\204\024\200\025\202\001" +
    "\002\000\036\030\314\031\326\032\316\033\321\034\322" +
    "\035\315\036\325\037\313\040\323\041\317\042\312\043" +
    "\327\044\324\074\uffd8\001\002\000\036\030\314\031\326" +
    "\032\316\033\321\034\322\035\315\036\325\037\313\040" +
    "\323\041\317\042\312\043\327\044\324\074\uffd9\001\002" +
    "\000\006\100\u0158\101\u0159\001\002\000\044\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\022\ufff2\026\ufff2\027\ufff2" +
    "\046\ufff2\047\ufff2\050\ufff2\062\ufff2\063\ufff2\064\ufff2\070" +
    "\ufff2\071\ufff2\076\ufff2\001\002\000\020\004\u015e\005\u015c" +
    "\006\204\024\u015d\025\202\044\u015f\056\u0161\001\002\000" +
    "\034\030\314\031\326\032\316\033\321\034\322\035\315" +
    "\036\325\037\313\040\323\041\317\042\312\043\327\044" +
    "\324\001\002\000\004\100\u0168\001\002\000\036\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\100\uffba" +
    "\001\002\000\036\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\100\uffb9\001\002\000\036\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\100\uffb8\001" +
    "\002\000\014\004\177\005\203\006\204\024\200\025\202" +
    "\001\002\000\004\100\u0166\001\002\000\006\004\u0162\005" +
    "\u0163\001\002\000\004\056\u0165\001\002\000\004\056\u0164" +
    "\001\002\000\004\100\uffb6\001\002\000\004\100\uffb7\001" +
    "\002\000\044\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\022\ufff1\026\ufff1\027\ufff1\046\ufff1\047\ufff1\050\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\070\ufff1\071\ufff1\076\ufff1\001\002" +
    "\000\004\100\uffb3\001\002\000\044\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\022\ufff0\026\ufff0\027\ufff0\046\ufff0" +
    "\047\ufff0\050\ufff0\062\ufff0\063\ufff0\064\ufff0\070\ufff0\071" +
    "\ufff0\076\ufff0\001\002\000\014\004\177\005\203\006\204" +
    "\024\200\025\202\001\002\000\036\030\314\031\326\032" +
    "\316\033\321\034\322\035\315\036\325\037\313\040\323" +
    "\041\317\042\312\043\327\044\324\100\uffb4\001\002\000" +
    "\036\030\314\031\326\032\316\033\321\034\322\035\315" +
    "\036\325\037\313\040\323\041\317\042\312\043\327\044" +
    "\324\100\uffb5\001\002\000\016\004\u016d\005\203\006\204" +
    "\024\200\025\202\044\344\001\002\000\036\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\074\u017e\001" +
    "\002\000\004\074\u0170\001\002\000\044\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\022\uffdf\026\uffdf\027\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\062\uffdf\063\uffdf\064\uffdf\070\uffdf" +
    "\071\uffdf\076\uffdf\001\002\000\004\075\u0171\001\002\000" +
    "\006\022\u0174\062\367\001\002\000\010\062\u012f\063\364" +
    "\076\uffce\001\002\000\004\076\u017c\001\002\000\004\020" +
    "\u0175\001\002\000\004\023\u0176\001\002\000\004\073\u0177" +
    "\001\002\000\006\004\223\006\225\001\002\000\004\074" +
    "\u0179\001\002\000\004\100\u017a\001\002\000\006\022\235" +
    "\076\uffd0\001\002\000\006\022\244\076\uffd1\001\002\000" +
    "\044\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\022\uffdd" +
    "\026\uffdd\027\uffdd\046\uffdd\047\uffdd\050\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\070\uffdd\071\uffdd\076\uffdd\001\002\000\006" +
    "\063\371\076\uffcf\001\002\000\004\075\u017f\001\002\000" +
    "\006\022\u0174\062\367\001\002\000\004\076\u0181\001\002" +
    "\000\044\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\022" +
    "\uffdc\026\uffdc\027\uffdc\046\uffdc\047\uffdc\050\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\070\uffdc\071\uffdc\076\uffdc\001\002\000" +
    "\004\004\u0183\001\002\000\004\074\u0184\001\002\000\004" +
    "\075\u0185\001\002\000\004\065\u0186\001\002\000\004\005" +
    "\u0187\001\002\000\004\021\u0188\001\002\000\004\004\u0189" +
    "\001\002\000\004\101\u018a\001\002\000\004\005\u018b\001" +
    "\002\000\004\100\u018c\001\002\000\006\062\367\066\u018f" +
    "\001\002\000\006\062\u012f\063\364\001\002\000\044\007" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\022\uff98\026\uff98" +
    "\027\uff98\046\uff98\047\uff98\050\uff98\062\uff98\063\uff98\064" +
    "\uff98\070\uff98\071\uff98\076\uff98\001\002\000\004\100\u0191" +
    "\001\002\000\044\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\022\uff97\026\uff97\027\uff97\046\uff97\047\uff97\050\uff97" +
    "\062\uff97\063\uff97\064\uff97\070\uff97\071\uff97\076\uff97\001" +
    "\002\000\004\065\u0192\001\002\000\004\005\u0193\001\002" +
    "\000\004\021\u0194\001\002\000\004\004\u0195\001\002\000" +
    "\004\101\u0196\001\002\000\004\005\u0197\001\002\000\004" +
    "\100\u0198\001\002\000\006\062\367\065\u019c\001\002\000" +
    "\006\062\u012f\063\364\001\002\000\044\007\uff94\010\uff94" +
    "\011\uff94\012\uff94\013\uff94\022\uff94\026\uff94\027\uff94\046" +
    "\uff94\047\uff94\050\uff94\062\uff94\063\uff94\064\uff94\070\uff94" +
    "\071\uff94\076\uff94\001\002\000\044\007\uff95\010\uff95\011" +
    "\uff95\012\uff95\013\uff95\022\uff95\026\uff95\027\uff95\046\uff95" +
    "\047\uff95\050\uff95\062\uff95\063\uff95\064\uff95\070\uff95\071" +
    "\uff95\076\uff95\001\002\000\004\005\u019d\001\002\000\004" +
    "\021\u019e\001\002\000\004\004\u019f\001\002\000\004\101" +
    "\u01a0\001\002\000\004\005\u01a1\001\002\000\004\100\u01a2" +
    "\001\002\000\006\062\367\067\u01a3\001\002\000\004\021" +
    "\u01aa\001\002\000\006\062\u012f\063\364\001\002\000\004" +
    "\076\u01a7\001\002\000\004\076\uff90\001\002\000\044\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\013\uff92\022\uff92\026\uff92" +
    "\027\uff92\046\uff92\047\uff92\050\uff92\062\uff92\063\uff92\064" +
    "\uff92\070\uff92\071\uff92\076\uff92\001\002\000\006\063\371" +
    "\067\u01a3\001\002\000\004\076\uff91\001\002\000\004\022" +
    "\u01ab\001\002\000\004\020\u01ac\001\002\000\004\023\u01ad" +
    "\001\002\000\004\073\u01ae\001\002\000\006\004\223\006" +
    "\225\001\002\000\004\074\u01b0\001\002\000\004\100\u01b1" +
    "\001\002\000\004\076\uff8f\001\002\000\006\063\371\065" +
    "\u019c\001\002\000\044\007\uff93\010\uff93\011\uff93\012\uff93" +
    "\013\uff93\022\uff93\026\uff93\027\uff93\046\uff93\047\uff93\050" +
    "\uff93\062\uff93\063\uff93\064\uff93\070\uff93\071\uff93\076\uff93" +
    "\001\002\000\006\063\371\066\u018f\001\002\000\044\007" +
    "\uff96\010\uff96\011\uff96\012\uff96\013\uff96\022\uff96\026\uff96" +
    "\027\uff96\046\uff96\047\uff96\050\uff96\062\uff96\063\uff96\064" +
    "\uff96\070\uff96\071\uff96\076\uff96\001\002\000\004\023\u01b7" +
    "\001\002\000\004\073\u01b8\001\002\000\006\004\223\006" +
    "\225\001\002\000\004\074\u01ba\001\002\000\004\100\u01bb" +
    "\001\002\000\044\007\uffef\010\uffef\011\uffef\012\uffef\013" +
    "\uffef\022\uffef\026\uffef\027\uffef\046\uffef\047\uffef\050\uffef" +
    "\062\uffef\063\uffef\064\uffef\070\uffef\071\uffef\076\uffef\001" +
    "\002\000\016\004\177\005\203\006\204\024\200\025\202" +
    "\044\344\001\002\000\004\074\u01be\001\002\000\004\075" +
    "\u01bf\001\002\000\006\022\u011e\062\367\001\002\000\006" +
    "\004\u01c1\100\u01c2\001\002\000\004\101\u01c4\001\002\000" +
    "\004\076\u01c3\001\002\000\044\007\uff85\010\uff85\011\uff85" +
    "\012\uff85\013\uff85\022\uff85\026\uff85\027\uff85\046\uff85\047" +
    "\uff85\050\uff85\062\uff85\063\uff85\064\uff85\070\uff85\071\uff85" +
    "\076\uff85\001\002\000\004\004\u01c5\001\002\000\004\030" +
    "\u01c6\001\002\000\004\005\u01c7\001\002\000\004\100\u01c8" +
    "\001\002\000\004\076\u01c9\001\002\000\044\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\022\uff86\026\uff86\027\uff86" +
    "\046\uff86\047\uff86\050\uff86\062\uff86\063\uff86\064\uff86\070" +
    "\uff86\071\uff86\076\uff86\001\002\000\012\002\ufff6\016\ufff6" +
    "\026\u01cd\027\u01cc\001\002\000\044\007\ufff4\010\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\022\ufff4\026\ufff4\027\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\062\ufff4\063\ufff4\064\ufff4\070\ufff4\071" +
    "\ufff4\076\ufff4\001\002\000\006\002\ufff7\016\ufff7\001\002" +
    "\000\006\002\ufff8\016\ufff8\001\002\000\006\002\ufff9\016" +
    "\ufff9\001\002\000\004\074\u01d0\001\002\000\004\075\u01d1" +
    "\001\002\000\014\007\041\010\052\011\053\012\022\013" +
    "\043\001\002\000\016\007\041\010\052\011\053\012\022" +
    "\013\043\076\u01d3\001\002\000\044\007\uff78\010\uff78\011" +
    "\uff78\012\uff78\013\uff78\022\uff78\026\uff78\027\uff78\046\uff78" +
    "\047\uff78\050\uff78\062\uff78\063\uff78\064\uff78\070\uff78\071" +
    "\uff78\076\uff78\001\002\000\004\004\u01d6\001\002\000\044" +
    "\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\022\uffeb\026" +
    "\uffeb\027\uffeb\046\uffeb\047\uffeb\050\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\070\uffeb\071\uffeb\076\uffeb\001\002\000\004\101" +
    "\u01d7\001\002\000\004\005\u01d8\001\002\000\004\100\u01d9" +
    "\001\002\000\004\072\u01da\001\002\000\004\075\u01db\001" +
    "\002\000\004\022\u01dd\001\002\000\004\004\u01e8\001\002" +
    "\000\004\020\u01de\001\002\000\004\023\u01df\001\002\000" +
    "\004\073\u01e0\001\002\000\006\004\223\006\225\001\002" +
    "\000\004\074\u01e2\001\002\000\004\100\u01e3\001\002\000" +
    "\010\004\uff7b\022\235\062\367\001\002\000\006\062\u012f" +
    "\063\364\001\002\000\006\004\uff7c\022\244\001\002\000" +
    "\004\004\uff7a\001\002\000\006\004\uff79\063\371\001\002" +
    "\000\004\101\u01f0\001\002\000\004\076\u01ea\001\002\000" +
    "\004\071\u01eb\001\002\000\004\073\u01ec\001\002\000\016" +
    "\004\177\005\203\006\204\024\200\025\202\044\344\001" +
    "\002\000\004\074\u01ee\001\002\000\004\100\u01ef\001\002" +
    "\000\044\007\uff7e\010\uff7e\011\uff7e\012\uff7e\013\uff7e\022" +
    "\uff7e\026\uff7e\027\uff7e\046\uff7e\047\uff7e\050\uff7e\062\uff7e" +
    "\063\uff7e\064\uff7e\070\uff7e\071\uff7e\076\uff7e\001\002\000" +
    "\004\004\u01f1\001\002\000\004\030\u01f2\001\002\000\004" +
    "\005\u01f3\001\002\000\004\100\u01f4\001\002\000\004\076" +
    "\uff7d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f2\000\010\067\010\070\007\071\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\071\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\075\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\076\020\001\001\000\030\002\035\012\034\021\036" +
    "\022\044\042\022\046\032\056\037\057\024\060\045\072" +
    "\026\073\041\001\001\000\002\001\001\000\004\051\u01d4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\035\012\034\021\036\022\044\042\022" +
    "\046\032\056\037\057\024\060\045\073\u01ca\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\060\061\057\001\001\000\004\002\164\001" +
    "\001\000\004\062\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\063\075\065" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\064\111\066\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\102\123" +
    "\001\001\000\004\101\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\132\001\001\000\004\103\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\141\001" +
    "\001\000\004\077\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\151\001\001\000\004" +
    "\105\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\106\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\175\043\200\001\001\000\004" +
    "\006\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\215" +
    "\045\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\233\045\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\002\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\175\043\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\270\045\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\175\043\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\307\045\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\060\061\333\001\001" +
    "\000\004\002\164\001\001\000\002\001\001\000\012\005" +
    "\336\024\340\025\342\026\337\001\001\000\004\006\u0153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\344\001\001\000\006" +
    "\006\345\010\346\001\001\000\006\005\355\026\356\001" +
    "\001\000\004\006\347\001\001\000\006\005\350\026\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\353\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\030\364\032\362\036\367\001\001" +
    "\000\004\036\u014b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\336\025\374\026\337\037" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\377\032\362\036" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\030\u0103\032\362\036\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\005\336\025\u0108" +
    "\026\337\033\u0106\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\032\u010b" +
    "\034\u010c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\u0111\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\u0114\050\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\336\025\u0118\026" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\032\u011b\047\u011c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u0121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\041\u0124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\336\025\u0108\026\337\033\u0130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\u010b\034\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u0139\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\u013d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\336\025\u0143\026\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u011b\047\u0146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\336\025\374\026\337\037\u014a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\u014e\032\362\036\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u0151\001\001\000\006\006" +
    "\345\010\u0152\001\001\000\004\006\347\001\001\000\004" +
    "\005\u0154\001\001\000\006\006\345\010\u0155\001\001\000" +
    "\004\006\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u015f\004\u015a\005\u0159\001\001\000\004\006" +
    "\u0168\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0169" +
    "\001\001\000\006\006\345\010\u016a\001\001\000\004\006" +
    "\347\001\001\000\012\005\336\023\u016e\025\u016d\026\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\027\u0172\032\u0171\001\001" +
    "\000\004\036\u017c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u0177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\u017a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\u017f\032\u0171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\u018d\014\u018f\032\u018c\001\001\000\004\036\u01b3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\u019a\016\u0199\032\u0198\001\001\000\004" +
    "\036\u01b1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u01a4\020\u01a5\032\u01a3\001\001\000\002\001\001\000\004" +
    "\036\u01a7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u01a8\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u01ae\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\u01b2\001" +
    "\001\000\002\001\001\000\004\014\u01b4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u01b8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\336\025\u01bc\026\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u011b\047\u01bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u01cd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\060\061\u01d1" +
    "\001\001\000\004\002\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\052\u01db\001\001\000\004\053\u01e8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u01e0\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\u01e3\041\u01e4\054\u01e5\001\001\000\004\036" +
    "\u01e6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\336\025\u01ec\026\337" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoStatpy$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoStatpy$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoStatpy$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        String lexema = (String) s.value;
        String descripcion = "Error sintáctico";
        int linea = s.left + 1;
        int columna = s.right + 1;

        // crear objeto de reporte error
        ReporteErrorSp error = new ReporteErrorSp(lexema, descripcion, linea, columna);

        // se añade error a la lista de errores
        ReporteErrorSp.errorListSP.add(error);

        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    String tmp="";
    String opr="";

// Se define lo siguiente para graficar

    public GraficarBarras gb = new GraficarBarras();    
    public GraficaPie gp = new GraficaPie();
    public TS ts = new TS();
    private ArrayList<Double> Values = new ArrayList<Double>();
    private ArrayList<String> ValuesX = new ArrayList<String>();
    String titulo;
    String titulox;
    String tituloy;

//Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultadosSP = new ArrayList<String>();

//Lista para almacenar resultados traducidos
    public ArrayList<String> translationResults = new ArrayList<>();

// Para retornar resultados traducidos
  public ArrayList<String> getTranslationResults() {
        return translationResults;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoStatpy$actions {
  private final SintacticoStatpy parser;

  /** Constructor */
  CUP$SintacticoStatpy$actions(SintacticoStatpy parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatpy$do_action_part00000000(
    int                        CUP$SintacticoStatpy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatpy$parser,
    java.util.Stack            CUP$SintacticoStatpy$stack,
    int                        CUP$SintacticoStatpy$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoStatpy$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoStatpy$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoStatpy$parser.done_parsing();
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIAS 
            {
              Object RESULT =null;
		
              //Almacena los resultados en una array list
                    System.out.println(tmp);
                    translationResults.add(tmp);
                    tmp="";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INICIO",53, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIAS S 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",54, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= S 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",54, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIAS ::= comentario 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",54, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIAS ::= comentario2 
            {
              Object RESULT =null;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com2+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",54, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;

                       
         tmp+="def" + " " + mai + "(";
                    
    
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$0",59, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;

                    tmp+=")"+":\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$1",60, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= VOI MAIN PAR_A NT$0 PAR_C LLAV_A NT$1 CUERPO LLAV_C COMENTARIOS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int vileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)).left;
		int viright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)).right;
		String vi = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String mai = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+="if__name__ = “__main__”:\n" + " " + mai + "()" + "\n" + com2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("S",55, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMENTARIOS ::= comentario 
            {
              String RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=com;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMENTARIOS ::= comentario2 
            {
              String RESULT =null;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=com2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMENTARIOS ::= 
            {
              String RESULT =null;
		
                    RESULT="";
              
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("COMENTARIOS",7, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // L ::= TIPO ID 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=tip+" "+id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("L",58, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= CUERPO C 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPO",56, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= C 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPO",56, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // C ::= TIPO ID PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // C ::= TIPO ID ASIGNA EXPRESION PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    tmp+=id+" "+"="+" "+exp+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // C ::= TIPO ID ASIGNA OPERACION PYCOMA 
            {
              Object RESULT =null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String tip = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    tmp+=id+" "+"="+" "+opr;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // C ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              Object RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    tmp+="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // C ::= IFSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // C ::= ELIFSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= SWITCHSTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // C ::= FORSTATE DOWHILESTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // C ::= WHILESTATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // C ::= RGB_STATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // C ::= RGP_STATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // C ::= RDG_STATE 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // C ::= comentario 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // C ::= comentario2 
            {
              Object RESULT =null;
		int com2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int com2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String com2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp+=com2+"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("C",57, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO ::= INT1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= CHAR1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= DOUBLE1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= BOOL1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO ::= STRING1 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TIPO",0, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFSTATE ::= IF PAR_A IFARG 
            {
              String RESULT =null;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int argright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp += ifpy + " " + arg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFSTATE",15, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ELIFSTATE ::= ELSEIF PAR_A ELIFARG 
            {
              String RESULT =null;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    tmp += "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFSTATE",16, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFARG ::= OPERIFS PAR_C LLAV_A CUERPOIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                     "   " + cuerpoif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARG",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFARG ::= ID PAR_C LLAV_A CUERPOIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" +
                      "   " + cuerpoif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARG",17, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELIFARG ::= OPERIFS PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                       "   " + cuerpoelif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFARG",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELIFARG ::= ID PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" + 
                       "   " + cuerpoelif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELIFARG",18, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERIFS ::= OP SIGNO OP TERMINO 
            {
              String RESULT =null;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signo2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signo2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op4 + " " + signo2 + " " + op5 + " " +term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERIFS ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op1 + " " + signo + " " + op2;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERIFS ::= NOT OP 
            {
              String RESULT =null;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  " " + "not" + " " + op3;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERIFS ::= NOT OP TERMINO 
            {
              String RESULT =null;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  " " + "not" + " " + op4 + " " + term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERIFS ::= SUPERNOT NOT OP 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  supernot + " " + "not" + " " + op5;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERIFS ::= SUPERNOT NOT OP TERMINO 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int op6left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op6right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op6 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT=  supernot + " " + "not" + " " + op6 + " " + term;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERIFS",19, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SUPERNOT ::= SUPERNOT NOT 
            {
              String RESULT =null;
		int supernotleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int supernotright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String supernot = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
             RESULT= supernot + " " + "not";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SUPERNOT",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SUPERNOT ::= NOT 
            {
              String RESULT =null;
		
             RESULT= " " + "not";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SUPERNOT",20, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUERPOIF ::= MOREIFS MORELIFS 
            {
              String RESULT =null;
		int ifstate1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifstate1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifstate1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=ifstate1 + "   " + elif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUERPOIF ::= MOREIFS 
            {
              String RESULT =null;
		int ifstateleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifstateright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifstate = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=ifstate;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOIF",21, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                +  print3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUERPOELIF ::= MOREIFS MORELIFS 
            {
              String RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "      " + ifs + "   " + elifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUERPOELIF ::= MORELIFS 
            {
              String RESULT =null;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                   RESULT=elifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA INT1 ID PYCOMA WHILEDOWHILE 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int whiledowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int whiledowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String whiledowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"  + whiledowhile;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOELIF",22, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MOREIFS ::= MOREIFS IF PAR_A IFARGIF 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int ifargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifarg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= moreifs + "   " + ifpy + " " + ifarg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREIFS",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MOREIFS ::= IF PAR_A IFARGIF 
            {
              String RESULT =null;
		int ifpyleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifpyright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifpy = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int ifargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int ifargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String ifarg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  ifpy + " " + ifarg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREIFS",24, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IFARGIF ::= OPERIFS PAR_C LLAV_A IFCUERPOIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int ifcuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifcuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifcuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                     "   " + ifcuerpoif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGIF",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IFARGIF ::= ID PAR_C LLAV_A IFCUERPOIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int ifcuerpoifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifcuerpoifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifcuerpoif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" +
                      "    " + ifcuerpoif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGIF",25, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "   " + "print("+varprint+")\n"
                                +  print3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "      " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IFCUERPOIF ::= MOREIFS 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "   " + moreifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA WHILESTATEIF 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int morewhifs2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int morewhifs2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String morewhifs2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "      " + "print("+varprint+")\n" + "      "  + morewhifs2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFCUERPOIF",26, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MORELIFS ::= MORELIFS ELSEIF PAR_A IFARGELIF 
            {
              String RESULT =null;
		int morelifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int morelifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String morelifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  morelifs + "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MORELIFS",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MORELIFS ::= ELSEIF PAR_A IFARGELIF 
            {
              String RESULT =null;
		int elseargleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elseargright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elsearg = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= "elif" + " " + elsearg;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MORELIFS",28, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IFARGELIF ::= OPERIFS PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int operleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                RESULT=oper + ":"+"\n" +
                       "      " + cuerpoelif;
                        
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGELIF",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IFARGELIF ::= ID PAR_C LLAV_A CUERPOELIF LLAV_C 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpoelifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoelifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpoelif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT=id + ":"+"\n" + 
                       "      " + cuerpoelif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("IFARGELIF",29, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MOREPRINTS ::= MOREPRINTS CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int moreprintsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int moreprintsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String moreprints = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= moreprints + "   " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREPRINTS",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MOREPRINTS ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "   " + "print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREPRINTS",31, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= ENTERO 
            {
              String RESULT =null;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= DOUBLE 
            {
              String RESULT =null;
		int dbleleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int dbleright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dble = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dble;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= COMILLA_S ID COMILLA_S 
            {
              String RESULT =null;
		int cs1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cs1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cs1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int cs2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cs2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cs2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cs1 + id + cs2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= COMILLA_S ENTERO COMILLA_S 
            {
              String RESULT =null;
		int cs3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cs3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cs3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int cs4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cs4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cs4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cs3 + nume + cs4;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("EXPRESION",1, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERACION ::= OP SIGNO OP TERMINO 
            {
              String RESULT =null;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int op4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int op4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String op4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT  = op3 + " " + signo + " " + op4 + " " + term +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERACION ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signo1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signo1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  
                    RESULT = op1  + " " + signo1 + " " + op2 +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACION ::= NOT OP 
            {
              String RESULT =null;
		int op5left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op5right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op5 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  
                    RESULT = "not" +  " "  + op5  +"\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP ::= ENTERO 
            {
              String RESULT =null;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP ::= DOUBLE 
            {
              String RESULT =null;
		int dbleleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int dbleright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dble = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dble;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP ::= DECIMAL 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dec;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OP",3, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SIGNO ::= SUMA 
            {
              String RESULT =null;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=sum;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SIGNO ::= RESTA 
            {
              String RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String resta = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=resta;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SIGNO ::= MULT 
            {
              String RESULT =null;
		int multleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int multright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mult = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mult;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SIGNO ::= DIV 
            {
              String RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=div;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SIGNO ::= MAYOR 
            {
              String RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mayor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mayor;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SIGNO ::= MENOR 
            {
              String RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String menor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=menor;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SIGNO ::= MAYOR_I 
            {
              String RESULT =null;
		int mayorileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int mayoriright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String mayori = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=mayori;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SIGNO ::= MENOR_I 
            {
              String RESULT =null;
		int menorileft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int menoriright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String menori = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=menori;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SIGNO ::= IGUAL 
            {
              String RESULT =null;
		int iguleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int iguright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String igu = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=igu;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SIGNO ::= DIST 
            {
              String RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int distright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dist = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=dist;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SIGNO ::= AND 
            {
              String RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String and = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="and";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SIGNO ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String or = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="or";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SIGNO ::= NOT 
            {
              String RESULT =null;
		
                    RESULT="not";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SIGNO",4, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TERMINO ::= TERMINO SIGNO OP 
            {
              String RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= term + " " + signo + "  " + op;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TERMINO ::= TERMINO SIGNO SUPERNOT OP 
            {
              String RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String term = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int not1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int not1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String not1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= term + " " + signo + "  " + not1 + "  " + op1;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // TERMINO ::= SIGNO OP 
            {
              String RESULT =null;
		int signo2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signo2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= signo2 + "  " + op2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TERMINO ::= SIGNO SUPERNOT OP 
            {
              String RESULT =null;
		int signo3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int signo3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String signo3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String not = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= signo3 + "  " + not + "  " + op3;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("TERMINO",6, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VARPRINT ::= CADENA SUMA ID 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad + ", " + id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VARPRINT ::= CADENA 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VARPRINT ::= CADENA SUMA ENTERO 
            {
              String RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int sumleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int sumright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String sum = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=cad + ", " + nume;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VARPRINT ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=id;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("VARPRINT",5, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SWITCHSTATE ::= SWITCH PAR_A ID PAR_C LLAV_A CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF 
            {
              String RESULT =null;
		int switleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int switright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String swit = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int enu1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "\n" +  switchif + "\n"; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHSTATE",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWITCHSTATE ::= SWITCH PAR_A ID PAR_C LLAV_A CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA CASE1 
            {
              String RESULT =null;
		int switleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int switright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String swit = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int enu1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int casoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String caso = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "," + "\n"  
                                                        + caso; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHSTATE",8, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SWITCHIF ::= MOREIFS MORELIFS CASE1 
            {
              String RESULT =null;
		int ifstate1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int case1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT = "        " + ifstate1 + "        " + elif + "," + case1;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF",9, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CASE1 ::= BREAK PYCOMA CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF2 
            {
              String RESULT =null;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + switchif; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE1",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CASE1 ::= BREAK PYCOMA CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA CASE2 
            {
              String RESULT =null;
		int enu2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int enu2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String enu2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int case2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + case2; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE1",10, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SWITCHIF2 ::= MOREIFS MORELIFS CASE2 
            {
              String RESULT =null;
		int ifstate2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int case2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int case2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String case2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT = "        " + ifstate2 + "        " + elif + "," + case2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF2",11, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CASE2 ::= CASE ENTERO DOSP ID ASIGNA ENTERO PYCOMA SWITCHIF3 LLAV_C 
            {
              String RESULT =null;
		int enu3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int enu3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String enu3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int id4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int id4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int enu4left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int enu4right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String enu4 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int switchifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int switchifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String switchif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                  RESULT = "      " + enu3 + ": " + id4 + " = " + enu4 + "," + "\n" + switchif + 
                                                  "     " + "}\n"; 
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASE2",12, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // SWITCHIF3 ::= MOREIFS MORELIFS CASED 
            {
              String RESULT =null;
		int ifstate3left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int ifstate3right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String ifstate3 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int casedleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casedright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cased = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                RESULT = "        " + ifstate3 + "        " + elif + "," + cased;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF3",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SWITCHIF3 ::= CASED 
            {
              String RESULT =null;
		int casedleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int casedright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String cased = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 
                RESULT = cased;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("SWITCHIF3",13, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CASED ::= DEFAULT DOSP CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT= "      " + "4: " + "print("+varprint+"),\n";
                                
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CASED",14, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FORSTATE ::= FOR PAR_A TIPO ID ASIGNA ENTERO PYCOMA OPERFOR PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR LLAV_C 
            {
              String RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).right;
		String fors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int operforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String operfor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int cuerpoforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpofor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                            tmp +=   "     "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "        " + cuerpofor ;  
                            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("FORSTATE",32, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CUERPOFOR ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CUERPOFOR ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CUERPOFOR ::= MOREFORS 
            {
              String RESULT =null;
		int moreforsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreforsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String morefors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT= morefors;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CUERPOFOR ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREFORS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int moreforsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreforsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String morefors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n" + "           " + morefors;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOFOR",34, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // MOREFORS ::= MOREFORS FOR PAR_A TIPO ID ASIGNA ENTERO PYCOMA OPERFOR PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR LLAV_C 
            {
              String RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).right;
		String fors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int operforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String operfor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int cuerpoforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpofor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                            RESULT =   "       "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "                         " + cuerpofor ;  
                            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREFORS",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-16)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // MOREFORS ::= FOR PAR_A TIPO ID ASIGNA ENTERO PYCOMA OPERFOR PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR LLAV_C 
            {
              String RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).right;
		String fors = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).left;
		int operforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).right;
		String operfor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-8)).value;
		int cuerpoforleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpoforright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpofor = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                            RESULT =   "       "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "                         " + cuerpofor ;  
                            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("MOREFORS",35, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-15)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OPERFOR ::= OP SIGNO OP 
            {
              String RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String signo = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
             RESULT= op2;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERFOR",33, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // WHILESTATE ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE ID ASIGNA ID SUMA ENTERO PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             tmp += whiles + " " + operifs + ":" + "\n" + 
                                "      " + cuerpowhile + 
                                "         " + id1 + " = " + id2 + " + " + nume + "\n";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATE",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // WHILESTATE ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             tmp += whiles + " " + operifs + ":" + "\n" + 
                                "      " + cuerpowhile;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATE",36, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // WHILEDOWHILE ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
             RESULT = "            " + whiles + " " + operifs + ":" + "\n" + 
                                "           " + cuerpowhile;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILEDOWHILE",43, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CUERPOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",37, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CUERPOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",37, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CUERPOWHILE ::= MOREIFS 
            {
              String RESULT =null;
		int moreifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int moreifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String moreifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT=  moreifs;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPOWHILE",37, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // WHILESTATEIF ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE ID ASIGNA ID SUMA ENTERO PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-10)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             RESULT = whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile + 
                                "         " + id1 + " = " + id2 + " + " + nume + "\n";
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATEIF",38, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-12)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // WHILESTATEIF ::= WHILE PAR_A OPERIFS PAR_C LLAV_A CUERPOWHILE PYCOMA LLAV_C 
            {
              String RESULT =null;
		int whilesleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int whilesright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String whiles = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int cuerpowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int cuerpowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String cuerpowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             RESULT = whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile;
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("WHILESTATEIF",38, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DOWHILESTATE ::= INT1 ID ASIGNA ENTERO PYCOMA DO LLAV_A CUERPODOWHILE OPERADOR LLAV_C WHILE PAR_A OPERIFS PAR_C PYCOMA 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-13)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-13)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-13)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-11)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-11)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-11)).value;
		int cuerpodowhileleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).left;
		int cuerpodowhileright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).right;
		String cuerpodowhile = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).right;
		String opr = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)).value;
		int operifsleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int operifsright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String operifs = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
             tmp += "          i = " + nume + "\n" 
                               + "          " + "while True:" +   "\n"  +
                                "              " + cuerpodowhile + 
                                "              " +    opr  + 
                                "              " + "if (" + operifs + "):" +   "\n" +  
                                "                         " + "break" + "\n";
                                
            
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("DOWHILESTATE",39, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-14)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERADOR ::= ID ASIGNA ID SUMA ENTERO PYCOMA 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int numeleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int numeright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String nume = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		
                    RESULT = id1 + " = " + id2 + " + " + nume + "\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("OPERADOR",41, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CUERPODOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA MOREPRINTS 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int print2left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int print2right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String print2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n"
                                + print2;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPODOWHILE",40, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CUERPODOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		
                    RESULT="print("+varprint+")\n";
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPODOWHILE",40, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CUERPODOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT PAR_C PYCOMA DOWHILEIF 
            {
              String RESULT =null;
		int varprintleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int varprintright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String varprint = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;
		int dowhileifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int dowhileifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String dowhileif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT="print("+varprint+")\n" + dowhileif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("CUERPODOWHILE",40, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DOWHILEIF ::= MOREIFS MORELIFS 
            {
              String RESULT =null;
		int ifstate1left = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int ifstate1right = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String ifstate1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int elifleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String elif = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		
                    RESULT = "        " + ifstate1 + "        " + elif;
                
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("DOWHILEIF",42, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // RGB_STATE ::= RGB PAR_A PAR_C LLAV_A INSTRUCCIONESFUNC LLAV_C 
            {
              String RESULT =null;
		
    gb.Graficar(titulo,titulox,tituloy,ValuesX,Values);
    titulo="";
    ValuesX.clear();
    Values.clear();


              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("RGB_STATE",44, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // RGP_STATE ::= RGP PAR_A PAR_C LLAV_A INSTRUCCIONESFUNC LLAV_C 
            {
              String RESULT =null;
		
         gp.Graficar(titulo, ValuesX, Values);
         titulo="";
         ValuesX.clear();
         Values.clear();
         

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("RGP_STATE",45, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // RDG_STATE ::= RDG PAR_A PAR_C LLAV_A INSTRUCCIONESFUNC LLAV_C 
            {
              String RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("RDG_STATE",46, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // INSTRUCCIONESFUNC ::= INSTRUCCIONESFUNC TIPO INSTRUCCIONFUNC 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESFUNC",47, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // INSTRUCCIONESFUNC ::= TIPO INSTRUCCIONFUNC 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONESFUNC",47, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
 titulo = (String)a; 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$2",61, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // INSTRUCCIONFUNC ::= RTitulo ASIGNA CADENA NT$2 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
 titulo = ts.get(a);  
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$3",62, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // INSTRUCCIONFUNC ::= RTitulo ASIGNA ID NT$3 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // INSTRUCCIONFUNC ::= CORCH_A CORCH_C REjex ASIGNA LLAV_A LISTAEJEX LLAV_C PYCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // INSTRUCCIONFUNC ::= CORCH_A CORCH_C RValores ASIGNA LLAV_A LISTAVALORES LLAV_C PYCOMA 
            {
              Object RESULT =null;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
 titulox=(String)a;
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$4",63, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // INSTRUCCIONFUNC ::= RTituloX ASIGNA CADENA NT$4 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$5 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
 titulox= ts.get(a); 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$5",64, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // INSTRUCCIONFUNC ::= RTituloX ASIGNA ID NT$5 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
tituloy=(String)a;
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$6",65, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INSTRUCCIONFUNC ::= RTituloY ASIGNA CADENA NT$6 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$7 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
tituloy=ts.get(a); 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$7",66, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // INSTRUCCIONFUNC ::= RTituloY ASIGNA ID NT$7 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$8 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
 ts.add(a,b); 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$8",67, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // INSTRUCCIONFUNC ::= ID ASIGNA CADENA NT$8 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-9)).value;
		int clavejsonleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).left;
		int clavejsonright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).right;
		String clavejson = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
  String value = JsonHashTable.get(clavejson); 

if (value != null) {
    ts.add(a, value); 
} else {
    System.out.println("error");
} 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$9",68, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // INSTRUCCIONFUNC ::= ID ASIGNA DOLAR LLAV_A NEWVALOR COMA CADENA COMA CADENA LLAV_C NT$9 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-11)).value;
		int clavejsonleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).left;
		int clavejsonright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).right;
		String clavejson = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-3)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
 ts.add(a,b); 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("NT$10",69, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // INSTRUCCIONFUNC ::= ID ASIGNA DOUBLE NT$10 PYCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)).value;

              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONFUNC",48, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LISTAEJEX ::= LISTAEJEX COMA ELEMENTOSEJEX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 ValuesX.add((String)a); 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("LISTAEJEX",49, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LISTAEJEX ::= ELEMENTOSEJEX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 ValuesX.add((String)a); RESULT = ValuesX; 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("LISTAEJEX",49, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LISTAVALORES ::= LISTAVALORES COMA ELEMENTOSVALORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 Values.add((Double)a); 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",50, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.elementAt(CUP$SintacticoStatpy$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LISTAVALORES ::= ELEMENTOSVALORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 Values.add((Double)a); RESULT = Values; 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("LISTAVALORES",50, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ELEMENTOSEJEX ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 RESULT= a; 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELEMENTOSEJEX",51, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ELEMENTOSEJEX ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  RESULT = ts.get(a);  
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELEMENTOSEJEX",51, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ELEMENTOSVALORES ::= DOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		 RESULT= Double.parseDouble(a); 
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELEMENTOSVALORES",52, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ELEMENTOSVALORES ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoStatpy$stack.peek()).value;
		  RESULT = Double.parseDouble(ts.get(a));  
              CUP$SintacticoStatpy$result = parser.getSymbolFactory().newSymbol("ELEMENTOSVALORES",52, ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoStatpy$stack.peek()), RESULT);
            }
          return CUP$SintacticoStatpy$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoStatpy$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoStatpy$do_action(
    int                        CUP$SintacticoStatpy$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoStatpy$parser,
    java.util.Stack            CUP$SintacticoStatpy$stack,
    int                        CUP$SintacticoStatpy$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoStatpy$do_action_part00000000(
                               CUP$SintacticoStatpy$act_num,
                               CUP$SintacticoStatpy$parser,
                               CUP$SintacticoStatpy$stack,
                               CUP$SintacticoStatpy$top);
    }
}

}
