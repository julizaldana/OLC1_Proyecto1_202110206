/* The following code was generated by JFlex 1.7.0 */

package AnalizadorStatpy;
import java_cup.runtime.*;
import ReportesHtml.ReporteTokenSp;
import ReportesHtml.ReporteErrorSp;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/AnalizadorStatpy/LexicoStatpy.jflex</tt>
 */
public class LexicoStatpy implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\72\1\61\1\63\1\64\1\62\22\0\1\35\1\51\1\73"+
    "\1\0\1\55\1\0\1\52\1\54\1\1\1\2\1\45\1\43\1\5"+
    "\1\44\1\10\1\46\12\60\1\11\1\6\1\50\1\7\1\47\2\0"+
    "\1\17\1\24\1\15\1\21\1\26\1\34\1\30\1\16\1\66\1\40"+
    "\1\70\1\25\1\33\1\13\1\22\1\37\1\74\1\20\1\67\1\14"+
    "\1\23\1\31\1\32\1\41\1\42\1\74\1\56\1\0\1\57\1\0"+
    "\1\71\1\0\1\17\1\24\1\15\1\21\1\26\1\34\1\30\1\16"+
    "\1\66\1\40\1\70\1\25\1\33\1\13\1\22\1\37\1\74\1\20"+
    "\1\67\1\14\1\23\1\31\1\32\1\41\1\42\1\74\1\3\1\53"+
    "\1\4\7\0\1\63\113\0\1\65\37\0\1\65\76\0\2\12\115\0"+
    "\1\27\u1ea8\0\1\63\1\63\u0100\0\1\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\1\7\13\1\1\4\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\1"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\13\1\32"+
    "\1\33\1\34\1\35\1\36\1\0\1\37\1\13\1\0"+
    "\4\13\1\40\5\13\2\0\6\13\2\0\1\41\1\42"+
    "\1\43\1\44\1\45\2\0\1\13\1\37\2\13\1\0"+
    "\1\46\1\47\1\13\1\0\2\13\1\0\6\13\1\0"+
    "\2\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\50\1\0\1\51\1\52\1\53"+
    "\1\47\3\13\1\0\1\13\1\54\2\55\1\0\4\13"+
    "\1\56\1\0\1\13\1\57\2\0\1\13\2\60\1\0"+
    "\1\13\1\0\1\13\2\61\1\62\1\63\3\13\1\0"+
    "\1\13\1\0\3\13\2\64\3\0\1\13\1\0\2\65"+
    "\2\66\3\13\2\67\1\0\1\13\1\70\1\13\1\0"+
    "\1\71\1\72\1\13\2\0\1\71\1\72\1\13\1\73"+
    "\1\74\1\73\1\74\2\75\1\76\1\77\2\100\2\0"+
    "\1\101\22\0\1\102\5\0\1\103\1\0\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\172\0\172\0\172\0\172\0\172"+
    "\0\172\0\267\0\172\0\172\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\172\0\172\0\172\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\172\0\172\0\172\0\172\0\u05b8"+
    "\0\u05f5\0\u0632\0\u066f\0\u06ac\0\172\0\172\0\172\0\172"+
    "\0\u06e9\0\172\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857"+
    "\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27"+
    "\0\172\0\172\0\172\0\172\0\172\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u01e8\0\u0d1b\0\u0d58\0\u06ac\0\172\0\172\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u01e8"+
    "\0\u138a\0\172\0\u13c7\0\u0ca1\0\u01e8\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u01e8\0\172\0\u01e8\0\u1535\0\u1572\0\u15af"+
    "\0\u15ec\0\u1629\0\u01e8\0\u1666\0\u16a3\0\u01e8\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\172"+
    "\0\u01e8\0\172\0\u13c7\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\172\0\u01e8\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u1be1\0\u1c1e\0\172\0\u01e8\0\172\0\u01e8\0\u1c5b"+
    "\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u01e8\0\u1e06"+
    "\0\u1e43\0\172\0\172\0\u1e80\0\u1ebd\0\u1efa\0\u01e8\0\u01e8"+
    "\0\u1f37\0\172\0\172\0\u01e8\0\u01e8\0\172\0\u01e8\0\u01e8"+
    "\0\172\0\172\0\u01e8\0\u1f74\0\u1fb1\0\u01e8\0\u1fee\0\u202b"+
    "\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213"+
    "\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\172\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\172\0\u2569"+
    "\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\3\21\1\22"+
    "\2\21\1\23\1\21\1\24\1\25\1\21\1\26\1\27"+
    "\1\30\1\31\1\32\1\3\4\21\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\2\32\1\0\1\32\1\51\1\52"+
    "\1\53\1\21\1\3\1\32\1\54\1\21\61\55\1\56"+
    "\11\55\1\57\1\55\104\0\1\60\100\0\1\61\20\0"+
    "\1\62\53\0\13\21\1\63\1\0\5\21\2\0\4\21"+
    "\15\0\1\21\4\0\1\51\4\21\2\0\1\21\12\0"+
    "\1\64\14\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\1\65\3\21\2\0\1\21\13\0\3\21"+
    "\1\66\1\67\2\21\1\70\4\21\1\0\5\21\2\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\13\0\14\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\7\21\1\71"+
    "\3\21\1\72\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\5\21\1\73"+
    "\1\21\1\74\4\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\13\0\12\21"+
    "\1\75\1\21\1\0\5\21\2\0\1\21\1\76\2\21"+
    "\15\0\1\21\4\0\1\51\4\21\2\0\1\21\14\0"+
    "\1\77\15\0\1\100\55\0\4\21\1\101\2\21\1\102"+
    "\4\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\13\0\3\21\1\103\1\21"+
    "\1\104\6\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\4\21\1\105"+
    "\7\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\13\0\7\21\1\106\4\21"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\35\0\1\32\23\0\2\32\1\0"+
    "\1\32\5\0\1\32\47\0\1\107\1\110\35\0\1\111"+
    "\74\0\1\112\74\0\1\113\137\0\1\114\75\0\1\115"+
    "\21\0\10\116\1\117\47\116\1\50\4\0\10\116\13\0"+
    "\14\51\1\0\5\51\2\0\4\51\15\0\1\51\4\0"+
    "\5\51\2\0\1\51\13\0\1\120\13\21\1\0\4\21"+
    "\1\121\2\0\4\21\15\0\1\21\4\0\1\51\4\21"+
    "\2\0\1\21\13\0\1\21\1\122\12\21\1\0\2\21"+
    "\1\123\2\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\73\124\1\125\1\124\14\0\1\126"+
    "\73\0\14\21\1\0\2\21\1\127\2\21\2\0\4\21"+
    "\15\0\1\21\4\0\1\51\4\21\2\0\1\21\14\0"+
    "\1\130\73\0\1\21\1\131\12\21\1\0\5\21\2\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\13\0\4\21\1\132\7\21\1\0\5\21\2\0\4\21"+
    "\15\0\1\21\4\0\1\51\4\21\2\0\1\21\13\0"+
    "\14\21\1\133\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\1\21\1\134\2\21\2\0\1\21\13\0\1\135"+
    "\13\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\13\0\10\21\1\136\3\21"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\13\0\14\21\1\0\4\21\1\137"+
    "\2\0\4\21\15\0\1\21\4\0\1\51\4\21\2\0"+
    "\1\21\13\0\13\21\1\140\1\0\5\21\2\0\4\21"+
    "\15\0\1\21\4\0\1\51\4\21\2\0\1\21\13\0"+
    "\7\21\1\141\4\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\13\0\14\21"+
    "\1\142\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\1\21\1\143\2\21\2\0\1\21\13\0\13\21\1\144"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\20\0\1\145\66\0\1\146\53\0"+
    "\1\146\21\0\12\21\1\147\1\21\1\0\5\21\2\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\12\0\1\150\14\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\1\151\3\21\2\0\1\21\12\0"+
    "\1\152\14\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\1\153\3\21\2\0\1\21\12\0\1\154"+
    "\14\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\1\155\3\21\2\0\1\21\12\0\1\156\14\21"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\1\157\3\21\2\0\1\21\13\0\5\21\1\160\6\21"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\45\107\1\161\27\107\61\110\2\162"+
    "\2\0\10\110\60\0\1\163\74\0\1\164\27\0\1\21"+
    "\1\165\12\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\5\21\1\166"+
    "\6\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\12\0\1\146\14\21\1\0"+
    "\5\21\2\0\4\21\15\0\1\21\4\0\1\51\1\167"+
    "\3\21\2\0\1\21\13\0\14\21\1\0\1\21\1\170"+
    "\3\21\2\0\4\21\15\0\1\21\4\0\1\51\4\21"+
    "\2\0\1\21\23\0\1\171\64\0\10\21\1\172\3\21"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\13\0\5\21\1\173\6\21\1\0"+
    "\5\21\2\0\4\21\15\0\1\21\4\0\1\51\4\21"+
    "\2\0\1\21\26\0\1\174\61\0\13\21\1\175\1\0"+
    "\5\21\2\0\4\21\15\0\1\21\4\0\1\51\4\21"+
    "\2\0\1\21\13\0\14\21\1\176\5\21\2\0\4\21"+
    "\15\0\1\21\4\0\1\51\1\21\1\177\2\21\2\0"+
    "\1\21\13\0\11\21\1\200\2\21\1\0\5\21\2\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\13\0\4\21\1\201\7\21\1\0\5\21\2\0\4\21"+
    "\15\0\1\21\4\0\1\51\4\21\2\0\1\21\13\0"+
    "\4\21\1\202\7\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\13\0\12\21"+
    "\1\203\1\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\26\0\1\204\61\0"+
    "\13\21\1\205\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\14\21\1\0"+
    "\5\21\2\0\2\21\1\206\1\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\12\0\1\207\53\0\1\207"+
    "\22\0\1\210\73\0\7\21\1\211\4\21\1\0\5\21"+
    "\2\0\4\21\15\0\1\21\4\0\1\51\4\21\2\0"+
    "\1\21\21\0\1\212\66\0\6\21\1\213\5\21\1\0"+
    "\5\21\2\0\4\21\15\0\1\21\4\0\1\51\4\21"+
    "\2\0\1\21\25\0\1\214\62\0\12\21\1\215\1\21"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\14\0\1\216\73\0\1\21\1\217"+
    "\12\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\13\0\1\220\74\0\1\221"+
    "\13\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\46\0\1\222\106\0\1\223"+
    "\26\0\1\207\14\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\1\224\3\21\2\0\1\21\13\0"+
    "\1\21\1\225\12\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\13\0\4\21"+
    "\1\226\7\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\25\0\1\227\62\0"+
    "\12\21\1\230\1\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\22\0\1\231"+
    "\65\0\7\21\1\232\4\21\1\0\5\21\2\0\4\21"+
    "\15\0\1\21\4\0\1\51\4\21\2\0\1\21\13\0"+
    "\12\21\1\233\1\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\13\0\10\21"+
    "\1\234\3\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\14\21\1\0"+
    "\5\21\1\0\1\235\4\21\15\0\1\21\4\0\1\51"+
    "\2\21\1\236\1\21\2\0\1\21\35\0\1\237\52\0"+
    "\14\21\1\0\5\21\1\237\1\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\1\240\76\0"+
    "\1\241\72\0\5\21\1\242\6\21\1\0\5\21\2\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\35\0\1\243\52\0\14\21\1\0\5\21\1\243\1\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\26\0\1\244\61\0\13\21\1\245\1\0\5\21\2\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\26\0\1\246\61\0\13\21\1\247\1\0\5\21\2\0"+
    "\4\21\15\0\1\21\4\0\1\51\4\21\2\0\1\21"+
    "\13\0\1\250\13\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\13\0\2\21"+
    "\1\251\11\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\13\0\12\21\1\252"+
    "\1\21\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\22\0\1\253\65\0\7\21"+
    "\1\254\4\21\1\0\5\21\2\0\4\21\15\0\1\21"+
    "\4\0\1\51\4\21\2\0\1\21\25\0\1\255\62\0"+
    "\12\21\1\256\1\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\13\0\13\21"+
    "\1\257\1\0\5\21\2\0\4\21\15\0\1\21\4\0"+
    "\1\51\4\21\2\0\1\21\13\0\12\21\1\260\1\21"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\12\0\1\261\53\0\1\261\36\0"+
    "\1\262\62\0\1\263\71\0\13\21\1\264\1\0\5\21"+
    "\2\0\4\21\15\0\1\21\4\0\1\51\4\21\2\0"+
    "\1\21\21\0\1\265\6\0\1\266\57\0\14\21\1\0"+
    "\1\267\4\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\13\0\3\21\1\270\10\21\1\0"+
    "\5\21\2\0\4\21\15\0\1\21\4\0\1\51\4\21"+
    "\2\0\1\21\13\0\7\21\1\271\4\21\1\0\5\21"+
    "\2\0\4\21\15\0\1\21\4\0\1\51\4\21\2\0"+
    "\1\21\41\0\1\272\1\273\45\0\14\21\1\0\5\21"+
    "\2\0\2\21\1\274\1\275\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\26\0\1\276\61\0\13\21\1\277"+
    "\1\0\5\21\2\0\4\21\15\0\1\21\4\0\1\51"+
    "\4\21\2\0\1\21\13\0\1\21\1\300\12\21\1\0"+
    "\5\21\2\0\4\21\15\0\1\21\4\0\1\51\4\21"+
    "\2\0\1\21\34\0\1\301\53\0\14\21\1\302\5\21"+
    "\2\0\4\21\15\0\1\21\4\0\1\51\1\21\1\303"+
    "\2\21\2\0\1\21\26\0\1\304\66\0\1\305\67\0"+
    "\5\21\1\306\6\21\1\0\5\21\2\0\4\21\15\0"+
    "\1\21\4\0\1\51\4\21\2\0\1\21\34\0\1\307"+
    "\57\0\1\310\67\0\1\311\53\0\1\311\42\0\1\312"+
    "\53\0\1\313\73\0\1\314\53\0\1\314\20\0\1\315"+
    "\53\0\1\315\23\0\1\316\77\0\1\317\73\0\1\320"+
    "\105\0\1\321\70\0\1\322\12\0\1\323\62\0\1\324"+
    "\66\0\1\325\67\0\1\326\53\0\1\326\30\0\1\327"+
    "\72\0\1\330\102\0\1\331\72\0\1\332\70\0\1\333"+
    "\73\0\1\334\74\0\1\335\102\0\1\336\76\0\1\337"+
    "\37\0\1\337\33\0\1\340\75\0\1\341\37\0\1\341"+
    "\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9638];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\7\11\1\1\2\11\16\1\3\11\6\1\4\11"+
    "\5\1\4\11\1\0\1\11\1\1\1\0\12\1\2\0"+
    "\6\1\2\0\5\11\2\0\4\1\1\0\2\11\1\1"+
    "\1\0\2\1\1\0\6\1\1\0\2\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\6\1\1\0\2\1\1\11\1\1\1\0"+
    "\5\1\1\0\2\1\2\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\4\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\1\3\0\1\1\1\0\1\11\1\1"+
    "\1\11\6\1\1\0\3\1\1\0\2\11\1\1\2\0"+
    "\3\1\2\11\2\1\1\11\2\1\2\11\1\1\2\0"+
    "\1\1\22\0\1\11\5\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String cadena="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicoStatpy(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 246) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);

        String lexema = yytext(); // Lexema es yytext()
        String descripcion = "Error léxico";
        int linea = yyline + 1;
        int columna = yycolumn + 1;

        ReporteErrorSp error = new ReporteErrorSp(lexema, descripcion, linea, columna);
        // Se añade a la lista de errores
        ReporteErrorSp.errorListSP.add(error);
            } 
            // fall through
          case 69: break;
          case 2: 
            { System.out.println("Reconocio "+yytext()+" PAR_ABRE " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext(),"  PAR_ABRE ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.PAR_A, yyline, yycolumn,yytext());
            } 
            // fall through
          case 70: break;
          case 3: 
            { System.out.println("Reconocio "+yytext()+" PAR_CIERRA " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," PAR_CIERRA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.PAR_C, yyline, yycolumn,yytext());
            } 
            // fall through
          case 71: break;
          case 4: 
            { System.out.println("Reconocio "+yytext()+" LLAV_ABRE " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," LLAV_ABRE ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.LLAV_A, yyline, yycolumn,yytext());
            } 
            // fall through
          case 72: break;
          case 5: 
            { System.out.println("Reconocio "+yytext()+" LLAV_CIERRA " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," LLAV_CIERRA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.LLAV_C, yyline, yycolumn,yytext());
            } 
            // fall through
          case 73: break;
          case 6: 
            { System.out.println("Reconocio "+yytext()+" COMA " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," COMA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.COMA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 74: break;
          case 7: 
            { System.out.println("Reconocio "+yytext()+" PYCOMA " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," PYCOMA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.PYCOMA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 75: break;
          case 8: 
            { System.out.println("Reconocio "+yytext()+" OP_ASIGNACION " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_ASIGNACION ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.ASIGNA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 76: break;
          case 9: 
            { System.out.println("Reconocio "+yytext()+" SIMBOLO_PUNTO " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," SIMBOLO_PUNTO ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.PUNTO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 77: break;
          case 10: 
            { System.out.println("Reconocio "+yytext()+" SIMBOLO_DOS_PUNTOS " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," SIMBOLO_DOS_PUNTOS ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DOSP, yyline, yycolumn,yytext());
            } 
            // fall through
          case 78: break;
          case 11: 
            { System.out.println("Reconocio "+yytext()+" Graf_identificador " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," GRAF_identificador ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.iden, yyline, yycolumn,yytext());
            } 
            // fall through
          case 79: break;
          case 12: 
            { 
            } 
            // fall through
          case 80: break;
          case 13: 
            { System.out.println("Reconocio "+yytext()+" OP_SUMA " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_SUMA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.SUMA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 81: break;
          case 14: 
            { System.out.println("Reconocio "+yytext()+" OP_RESTA " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_RESTA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RESTA, yyline, yycolumn,yytext());
            } 
            // fall through
          case 82: break;
          case 15: 
            { System.out.println("Reconocio "+yytext()+" OP_MULT " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_MULTIPLICACION ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.MULT, yyline, yycolumn,yytext());
            } 
            // fall through
          case 83: break;
          case 16: 
            { System.out.println("Reconocio "+yytext()+" OP_DIV " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_DIVISION ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DIV, yyline, yycolumn,yytext());
            } 
            // fall through
          case 84: break;
          case 17: 
            { System.out.println("Reconocio "+yytext()+" OP_MAYOR " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_MAYOR ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.MAYOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 85: break;
          case 18: 
            { System.out.println("Reconocio "+yytext()+" OP_MENOR " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_MENOR ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.MENOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 86: break;
          case 19: 
            { System.out.println("Reconocio "+yytext()+" OP_NOT " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_NOT ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.NOT, yyline, yycolumn,yytext());
            } 
            // fall through
          case 87: break;
          case 20: 
            { System.out.println("Reconocio "+yytext()+" COMILLA_SIMPLE " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," COMILLA_SIMPLE ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.COMILLA_S, yyline, yycolumn,yytext());
            } 
            // fall through
          case 88: break;
          case 21: 
            { System.out.println("Reconocio "+yytext()+" SIMBOLO_DOLAR " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," SIMBOLO_DOLAR ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DOLAR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 89: break;
          case 22: 
            { System.out.println("Reconocio "+yytext()+" CORCH_A " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," CORCH_A ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.CORCH_A, yyline, yycolumn,yytext());
            } 
            // fall through
          case 90: break;
          case 23: 
            { System.out.println("Reconocio "+yytext()+" CORCH_C " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," CORCH_C ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.CORCH_C, yyline, yycolumn,yytext());
            } 
            // fall through
          case 91: break;
          case 24: 
            { System.out.println("Reconocio "+yytext()+" ENTERO " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," ENTERO ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.ENTERO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 92: break;
          case 25: 
            { System.out.println("Reconocio "+yytext()+" IDENTIFICADOR " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," IDENTIFICADOR ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.ID, yyline, yycolumn,yytext());
            } 
            // fall through
          case 93: break;
          case 26: 
            { yybegin(CADENA) ; cadena+="\"";
            } 
            // fall through
          case 94: break;
          case 27: 
            { cadena+= yytext();
            } 
            // fall through
          case 95: break;
          case 28: 
            { String tmp = cadena; cadena="";
                      System.out.println("se esperaba un cierre de cadena (\") ");
                      yybegin(YYINITIAL);
            } 
            // fall through
          case 96: break;
          case 29: 
            { String tmp = cadena+"\""; cadena=""; yybegin(YYINITIAL);                             
                            return new Symbol(sym.CADENA, yychar,yyline,tmp);
            } 
            // fall through
          case 97: break;
          case 30: 
            { System.out.println("Reconocio "+yytext()+" OP_IGUAL " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_IGUAL ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.IGUAL , yyline, yycolumn,yytext());
            } 
            // fall through
          case 98: break;
          case 31: 
            { System.out.println("Reconocio "+yytext()+" IF_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," IF_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.IF, yyline, yycolumn,yytext());
            } 
            // fall through
          case 99: break;
          case 32: 
            { System.out.println("Reconocio "+yytext()+" DO_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," DO_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DO, yyline, yycolumn,yytext());
            } 
            // fall through
          case 100: break;
          case 33: 
            { System.out.println("Reconocio "+yytext()+" OP_MAYOR_IGUAL " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_MAYOR_IGUAL ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.MAYOR_I, yyline, yycolumn,yytext());
            } 
            // fall through
          case 101: break;
          case 34: 
            { System.out.println("Reconocio "+yytext()+" OP_MENOR_IGUAL " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_MENOR_IGUAL ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.MENOR_I, yyline, yycolumn,yytext());
            } 
            // fall through
          case 102: break;
          case 35: 
            { System.out.println("Reconocio "+yytext()+" OP_DISTINTO " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_DISTINTO ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DIST, yyline, yycolumn,yytext());
            } 
            // fall through
          case 103: break;
          case 36: 
            { System.out.println("Reconocio "+yytext()+" OP_AND " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_AND ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.AND, yyline, yycolumn,yytext());
            } 
            // fall through
          case 104: break;
          case 37: 
            { System.out.println("Reconocio "+yytext()+" OP_OR " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," OP_OR ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.OR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 105: break;
          case 38: 
            { System.out.println("Reconocio "+yytext()+" cadena " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," cadena ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.cadenas, yyline, yycolumn,yytext());
            } 
            // fall through
          case 106: break;
          case 39: 
            { System.out.println("Reconocio "+yytext()+" INT_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," INT_Reservada ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.INT1, yyline, yycolumn,"entero");
            } 
            // fall through
          case 107: break;
          case 40: 
            { System.out.println("Reconocio "+yytext()+" FOR_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," FOR_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.FOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 108: break;
          case 41: 
            { System.out.println("Reconocio "+yytext()+" COMENTARIO_SIMPLE " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," COMENTARIO_SIMPLE ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.comentario, yyline, yycolumn,yytext());
            } 
            // fall through
          case 109: break;
          case 42: 
            { System.out.println("Reconocio "+yytext()+" DOUBLE " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," DOUBLE ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DOUBLE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 110: break;
          case 43: 
            { System.out.println("Reconocio "+yytext()+" decimal " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," N_decimal ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.decimales, yyline, yycolumn,yytext());
            } 
            // fall through
          case 111: break;
          case 44: 
            { System.out.println("Reconocio "+yytext()+" CHAR_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," CHAR_Reservada ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.CHAR1, yyline, yycolumn,"caracter");
            } 
            // fall through
          case 112: break;
          case 45: 
            { System.out.println("Reconocio "+yytext()+" CASE_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," CASE_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.CASE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 113: break;
          case 46: 
            { System.out.println("Reconocio "+yytext()+" BOOL_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," BOOL_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.BOOL1, yyline, yycolumn,"booleano");
            } 
            // fall through
          case 114: break;
          case 47: 
            { System.out.println("Reconocio "+yytext()+" REjex " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," REjex ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.REjex, yyline, yycolumn,yytext());
            } 
            // fall through
          case 115: break;
          case 48: 
            { System.out.println("Reconocio "+yytext()+" VOID_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," VOID_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.VOI, yyline, yycolumn,yytext());
            } 
            // fall through
          case 116: break;
          case 49: 
            { System.out.println("Reconocio "+yytext()+" MAIN_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," MAIN_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.MAIN, yyline, yycolumn,yytext());
            } 
            // fall through
          case 117: break;
          case 50: 
            { System.out.println("Reconocio "+yytext()+" COMENTARIO_MULTILINEA " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," COMENTARIO_MULTILINEA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.comentario2, yyline, yycolumn,yytext());
            } 
            // fall through
          case 118: break;
          case 51: 
            { System.out.println("Reconocio "+yytext()+" DECIMAL " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," DECIMAL ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DECIMAL, yyline, yycolumn,yytext());
            } 
            // fall through
          case 119: break;
          case 52: 
            { System.out.println("Reconocio "+yytext()+" BREAK_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," BREAK_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.BREAK, yyline, yycolumn,yytext());
            } 
            // fall through
          case 120: break;
          case 53: 
            { System.out.println("Reconocio "+yytext()+" WHILE_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," WHILE_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.WHILE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 121: break;
          case 54: 
            { System.out.println("Reconocio "+yytext()+" WRITE_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," WRITE_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.WRITE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 122: break;
          case 55: 
            { System.out.println("Reconocio "+yytext()+" RTitulo " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," RTitulo ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RTitulo, yyline, yycolumn,yytext());
            } 
            // fall through
          case 123: break;
          case 56: 
            { System.out.println("Reconocio "+yytext()+" DOUBLE_Rersevada " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," DOUBLE_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DOUBLE1, yyline, yycolumn,"double");
            } 
            // fall through
          case 124: break;
          case 57: 
            { System.out.println("Reconocio "+yytext()+" STRING_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," STRING_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.STRING1, yyline, yycolumn,"string");
            } 
            // fall through
          case 125: break;
          case 58: 
            { System.out.println("Reconocio "+yytext()+" SWITCH_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," SWITCH_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.SWITCH, yyline, yycolumn,yytext());
            } 
            // fall through
          case 126: break;
          case 59: 
            { System.out.println("Reconocio "+yytext()+" RTituloX " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," RTituloX ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RTituloX, yyline, yycolumn,yytext());
            } 
            // fall through
          case 127: break;
          case 60: 
            { System.out.println("Reconocio "+yytext()+" RTituloY " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," RTituloY ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RTituloY, yyline, yycolumn,yytext());
            } 
            // fall through
          case 128: break;
          case 61: 
            { System.out.println("Reconocio "+yytext()+" CONSOLE_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," CONSOLE_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.CONSOLE, yyline, yycolumn,yytext());
            } 
            // fall through
          case 129: break;
          case 62: 
            { System.out.println("Reconocio "+yytext()+" DEFAULT_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," DEFAULT_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.DEFAULT, yyline, yycolumn,yytext());
            } 
            // fall through
          case 130: break;
          case 63: 
            { System.out.println("Reconocio "+yytext()+" ELSEIF_R " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," ELSEIF_R ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.ELSEIF, yyline, yycolumn,yytext());
            } 
            // fall through
          case 131: break;
          case 64: 
            { System.out.println("Reconocio "+yytext()+" RValores " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," RValores ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RValores, yyline, yycolumn,yytext());
            } 
            // fall through
          case 132: break;
          case 65: 
            { System.out.println("Reconocio "+yytext()+" NEW_VALOR " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," NEW_VALOR ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.NEWVALOR, yyline, yycolumn,yytext());
            } 
            // fall through
          case 133: break;
          case 66: 
            { System.out.println("Reconocio "+yytext()+" RGP " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," R_GRAF_PIE ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RGP, yyline, yycolumn,yytext());
            } 
            // fall through
          case 134: break;
          case 67: 
            { System.out.println("Reconocio "+yytext()+" RGB " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," R_GRAF_BARRA ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RGB, yyline, yycolumn,yytext());
            } 
            // fall through
          case 135: break;
          case 68: 
            { System.out.println("Reconocio "+yytext()+" RDG " + " en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1) );  
                        ReporteTokenSp token = new ReporteTokenSp (yytext()," R_DEF_GLOBAL ",yyline+1,yycolumn+1);
                        ReporteTokenSp.tokenListSP.add(token);
                        return new Symbol(sym.RDG, yyline, yycolumn,yytext());
            } 
            // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
