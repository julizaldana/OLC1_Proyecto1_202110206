package AnalizadorStatpy;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;


parser code {:
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    String tmp="";
    String opr="";


//Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultadosSP = new ArrayList<String>();

//Lista para almacenar resultados traducidos
    public ArrayList<String> translationResults = new ArrayList<>();

// Para retornar resultados traducidos
  public ArrayList<String> getTranslationResults() {
        return translationResults;
    }

:}

terminal String ID,ENTERO,CADENA,INT1,CHAR1,DOUBLE1,BOOL1,STRING1,PUB,PRI,VOI,MAIN,PUNTO,CONSOLE,WRITE,DOUBLE,DECIMAL,comentario,comentario2;
terminal String SUMA, RESTA, MULT, DIV, MAYOR, MENOR, MAYOR_I, MENOR_I, IGUAL, DIST, AND, OR, NOT;
terminal String COMILLA_S;
terminal String IF, ELSEIF;
terminal PAR_A, PAR_C, LLAV_A, LLAV_C, COMA, PYCOMA,ASIGNA;


nonterminal String TIPO, EXPRESION, OPERACION, OP, SIGNO, VARPRINT, TERMINO, VARPRINT2;
nonterminal String IFSTATE, ELIFSTATE, IFARG, ELIFARG, OPERIFS, CUERPOIF, CUERPOELIF, MOREIFS, MORELIFS, MOREPRINTS;
nonterminal  INICIO, SENTENCIAS, S, CUERPO, C, L;

start with INICIO;


INICIO ::= SENTENCIAS
                {:
                    System.out.println(tmp);
                    tmp="";
                :}
;
SENTENCIAS ::= SENTENCIAS S
    |S
    | comentario:com
                {:
                    tmp+=com+"\n";
                :}
    | comentario2:com2
                {:
                    tmp+=com2+"\n";
                :}
;
S ::= VOI:vi MAIN:mai PAR_A   {:
                       
         tmp+="def" + " " + mai + "(";
                    
    :}
    PAR_C LLAV_A
                {:
                    tmp+=")"+":\n";
                :}
                CUERPO LLAV_C
                {:
                    tmp+="if__name__ = “__main__”:\n" + " " + mai + "()";
                :}
;

L ::= TIPO:tip ID:id
                {:
                    tmp+=tip+" "+id;
                :}
;
CUERPO ::= CUERPO C
    | C
;
C ::= TIPO:tip ID:id PYCOMA

    | TIPO:tip ID:id ASIGNA EXPRESION:exp PYCOMA
                {:
                    tmp+=id+" "+"="+" "+exp+"\n";
                :}

    | TIPO:tip ID:id ASIGNA OPERACION:opr PYCOMA
                {:
                    tmp+=id+" "+"="+" "+opr;
                :}
       
    |CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    tmp+="print("+varprint+")\n";
                :}
    | IFSTATE 
    | ELIFSTATE 
    | comentario:com
                {:
                    tmp+=com+"\n";
                :}
    | comentario2:com2
                {:
                    tmp+=com2+"\n";
                :}
;


TIPO ::= INT1 

    | CHAR1

    | DOUBLE1

    | BOOL1

    | STRING1

;


IFSTATE ::= IF:ifpy PAR_A IFARG:arg 
                {:
                    tmp += ifpy + " " + arg;
                :}
;

ELIFSTATE ::= ELSEIF PAR_A ELIFARG:elsearg  
                {:
                    tmp += "elif" + " " + elsearg;
                :}
;

IFARG ::= OPERIFS:oper PAR_C LLAV_A CUERPOIF:cuerpoif LLAV_C 
                        {:
                RESULT=oper + ":"+"\n" +
                     "   " + cuerpoif;
                        :}
    | ID:id PAR_C LLAV_A CUERPOIF:cuerpoif LLAV_C
                {:
                    RESULT=id + ":"+"\n" +
                      "   " + cuerpoif;
                :}
;


ELIFARG ::= OPERIFS:oper PAR_C LLAV_A CUERPOELIF:cuerpoelif LLAV_C 
                        {:
                RESULT=oper + ":"+"\n" +
                       "   " + cuerpoelif;
                        :}
    | ID:id PAR_C LLAV_A CUERPOELIF:cuerpoelif LLAV_C
                {:
                    RESULT=id + ":"+"\n" + 
                       "   " + cuerpoelif;
                :}
;

OPERIFS ::= OP:op1 SIGNO:signo OP:op2
            {:
             RESULT= op1 + " " + signo + " " + op2;
            :}
;

CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA MOREPRINTS:print2
                {:
                    RESULT="print("+varprint+")\n"
                                + print2;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT="print("+varprint+")\n";
                :}
    | MOREIFS:ifstate 
                {:
                    RESULT=ifstate;
                :}
    | MORELIFS:elifstate
                {:
                    RESULT=elifstate;
                :}
;

CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA  MOREPRINTS:print3
                {:
                    RESULT="print("+varprint+")\n"
                                +  print3;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT="print("+varprint+")\n";
                :}
    | MORELIFS:elifs 
                {:
                   RESULT=elifs;
                :}

;


MOREIFS ::= MOREIFS:moreifs IF:ifpy PAR_A IFARG:arg 
                {:
                    RESULT= moreifs + "   " + ifpy + " " + arg;
                :}
    | IF:ifpy PAR_A IFARG:arg 
                {:
                    RESULT=  ifpy + " " + arg;
                :}
;

MORELIFS ::= MORELIFS:morelifs ELSEIF PAR_A ELIFARG:elsearg  
                {:
                    RESULT=  morelifs + "elif" + " " + elsearg;
                :}
    | ELSEIF PAR_A ELIFARG:elsearg  
                {:
                    RESULT= "elif" + " " + elsearg;
                :}
;

MOREPRINTS ::= MOREPRINTS:moreprints CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT= moreprints + "   " + "print("+varprint+")\n";
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT= "   " + "print("+varprint+")\n";
                :}
;

EXPRESION ::= ENTERO:nume
                {:
                    RESULT=nume;
                :}
    | DOUBLE:dble
                {:
                    RESULT=dble;
                :}
    | ID:id
                {:
                    RESULT=id;
                :}
    | COMILLA_S:cs1 ID:id COMILLA_S:cs2
               {:
                    RESULT=cs1 + id + cs2;
                :}
    | COMILLA_S:cs3 ENTERO:nume COMILLA_S:cs4
               {:
                    RESULT=cs3 + nume + cs4;
                :}           
;


OPERACION ::= OP:op3 SIGNO:signo OP:op4 TERMINO:term
                {:
                  RESULT  = op3 + " " + signo + " " + op4 + " " + term +"\n";
                :}
    | OP:op1 SIGNO:signo1 OP:op2
                {:  
                    RESULT = op1  + " " + signo1 + " " + op2 +"\n";
                :}
    | NOT OP:op5
                {:  
                    RESULT = "not" +  " "  + op5  +"\n";
                :}
;


OP ::= ID:id
                {:
                    RESULT=id;
                :}
    | ENTERO:nume
                {:
                    RESULT=nume;
                :}
    | DOUBLE:dble
                {:
                    RESULT=dble;
                :}
    | CADENA:cad
                {:
                    RESULT=cad;
                :}
    | DECIMAL:dec
                {:
                    RESULT=dec;
                :}
                
;


SIGNO ::= SUMA:sum
                {:
                    RESULT=sum;
                :}
    | RESTA:resta
                {:
                    RESULT=resta;
                :}
    | MULT:mult
                {:
                    RESULT=mult;
                :}
    | DIV:div
                {:
                    RESULT=div;
                :}
    | MAYOR:mayor
                {:
                    RESULT=mayor;
                :}
    | MENOR:menor
                {:
                    RESULT=menor;
                :}
    | MAYOR_I:mayori
                {:
                    RESULT=mayori;
                :}
    | MENOR_I:menori
                {:
                    RESULT=menori;
                :}
    | IGUAL:igu
                {:
                    RESULT=igu;
                :}
    | DIST:dist
                {:
                    RESULT=dist;
                :}
    | AND:and
                {:
                    RESULT="and";
                :}
    | OR:or
                {:
                    RESULT="or";
                :}
;


TERMINO ::= TERMINO:term SIGNO:signo OP:op
                {:
                    RESULT= term + " " + signo + "  " + op;
                :}
    | SIGNO:signo2 OP:op2
                {:
                    RESULT= signo2 + "  " + op2;
                :}
;



VARPRINT ::= CADENA:cad SUMA:sum ID:id
                {:
                    RESULT=cad + ", " + id;
                :}
    | CADENA:cad
                {:
                    RESULT=cad;
                :}
    | CADENA:cad SUMA:sum ENTERO:nume
                {:
                    RESULT=cad + ", " + nume;
                :}
    | ID:id
                {:
                    RESULT=id;
                :}
;

