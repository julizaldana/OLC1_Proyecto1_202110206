package AnalizadorStatpy;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import ReportesHtml.ReporteErrorSp;
import GraficasJava.*;
import AnalizadorJson.*;


parser code {:
    public void syntax_error(Symbol s){
        String lexema = (String) s.value;
        String descripcion = "Error sintáctico";
        int linea = s.left + 1;
        int columna = s.right + 1;

        // crear objeto de reporte error
        ReporteErrorSp error = new ReporteErrorSp(lexema, descripcion, linea, columna);

        // se añade error a la lista de errores
        ReporteErrorSp.errorListSP.add(error);

        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
    String tmp="";
    String opr="";

// Se define lo siguiente para graficar

    public GraficarBarras gb = new GraficarBarras();    
    public GraficaPie gp = new GraficaPie();
    public TS ts = new TS();
    private ArrayList<Double> Values = new ArrayList<Double>();
    private ArrayList<String> ValuesX = new ArrayList<String>();
    String titulo;
    String titulox;
    String tituloy;

//Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
    public List<String> resultadosSP = new ArrayList<String>();

//Lista para almacenar resultados traducidos
    public ArrayList<String> translationResults = new ArrayList<>();

// Para retornar resultados traducidos
  public ArrayList<String> getTranslationResults() {
        return translationResults;
    }

:}

terminal String ID,ENTERO,CADENA,INT1,CHAR1,DOUBLE1,BOOL1,STRING1,PUB,PRI,VOI,MAIN,PUNTO,DOSP,CONSOLE,WRITE,DOUBLE,DECIMAL,comentario,comentario2;
terminal String SUMA, RESTA, MULT, DIV, MAYOR, MENOR, MAYOR_I, MENOR_I, IGUAL, DIST, AND, OR, NOT;
terminal String NEWVALOR,RGB,RGP,RDG,REjex,RValores,RTitulo,RTituloY,RTituloX;
terminal String COMILLA_S,DOLAR,CORCH_A,CORCH_C;
terminal String IF, ELSEIF, SWITCH, CASE, BREAK, DEFAULT, FOR, WHILE, DO;
terminal String PAR_A, PAR_C, LLAV_A, LLAV_C, COMA, PYCOMA,ASIGNA;


nonterminal String TIPO, EXPRESION, OPERACION, OP, SIGNO, VARPRINT, TERMINO, COMENTARIOS;
nonterminal String SWITCHSTATE,SWITCHIF,CASE1,SWITCHIF2,CASE2,SWITCHIF3,CASED;
nonterminal String IFSTATE, ELIFSTATE, IFARG, ELIFARG, OPERIFS, SUPERNOT, CUERPOIF, CUERPOELIF, MASIFS, MOREIFS, IFARGIF, IFCUERPOIF, IFSANIDADOS, MORELIFS, IFARGELIF, IFCUERPOELIF, MOREPRINTS;
nonterminal String FORSTATE, OPERFOR, CUERPOFOR, MOREFORS;
nonterminal String WHILESTATE, CUERPOWHILE, WHILESTATEIF;
nonterminal String DOWHILESTATE,CUERPODOWHILE, OPERADOR,DOWHILEIF,WHILEDOWHILE;
nonterminal String RGB_STATE,RGP_STATE,RDG_STATE;
nonterminal INSTRUCCIONESFUNC, INSTRUCCIONFUNC, LISTAEJEX,LISTAVALORES, ELEMENTOSEJEX, ELEMENTOSVALORES;
nonterminal  INICIO, SENTENCIAS, S, CUERPO, C, L;


start with INICIO;


INICIO ::= SENTENCIAS
                {:
                    System.out.println(tmp);
                    tmp="";
                :}
;
SENTENCIAS ::= SENTENCIAS S
    |S
    | comentario:com
                {:
                    tmp+=com+"\n";
                :}
    | comentario2:com2
                {:
                    tmp+=com2+"\n";
                :}
;
S ::= VOI:vi MAIN:mai PAR_A   {:
                       
         tmp+="def" + " " + mai + "(";
                    
    :}
    PAR_C LLAV_A
                {:
                    tmp+=")"+":\n";
                :}
                CUERPO LLAV_C COMENTARIOS:com2
                {:
                    tmp+="if__name__ = “__main__”:\n" + " " + mai + "()" + "\n" + com2;
                :}            
;

COMENTARIOS ::= comentario:com
                {:
                    RESULT=com;
                :}
    | comentario2:com2
                {:
                    RESULT=com2;
                :}
    |         
               {:
                    RESULT="";
              :}
;

L ::= TIPO:tip ID:id
                {:
                    tmp+=tip+" "+id;
                :}
;

/* CUERPO DEL MAIN */

CUERPO ::= CUERPO C
    | C
;

C ::= TIPO:tip ID:id PYCOMA

    | TIPO:tip ID:id ASIGNA EXPRESION:exp PYCOMA
                {:
                    tmp+=id+" "+"="+" "+exp+"\n";
                :}

    | TIPO:tip ID:id ASIGNA OPERACION:opr PYCOMA
                {:
                    tmp+=id+" "+"="+" "+opr;
                :}
       
    |CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    tmp+="print("+varprint+")\n";
                :}
    | IFSTATE 
    | ELIFSTATE 
    | SWITCHSTATE
    | FORSTATE  DOWHILESTATE
    | WHILESTATE
    | RGB_STATE
    | RGP_STATE
    | RDG_STATE
    | comentario:com
                {:
                    tmp+=com;
                :}
    | comentario2:com2
                {:
                    tmp+=com2+"\n";
                :}
;


TIPO ::= INT1 

    | CHAR1

    | DOUBLE1

    | BOOL1

    | STRING1

;


/* SENTENCIAS IF - ELSE IF */

IFSTATE ::= IF:ifpy PAR_A IFARG:arg 
                {:
                    tmp += ifpy + " " + arg;
                :}
;

ELIFSTATE ::= ELSEIF PAR_A ELIFARG:elsearg  
                {:
                    tmp += "elif" + " " + elsearg;
                :}
;

IFARG ::= OPERIFS:oper PAR_C LLAV_A CUERPOIF:cuerpoif LLAV_C 
                        {:
                RESULT=oper + ":"+"\n" +
                     "   " + cuerpoif;
                        :}
    | ID:id PAR_C LLAV_A CUERPOIF:cuerpoif LLAV_C
                {:
                    RESULT=id + ":"+"\n" +
                      "   " + cuerpoif;
                :}
;


ELIFARG ::= OPERIFS:oper PAR_C LLAV_A CUERPOELIF:cuerpoelif LLAV_C 
                        {:
                RESULT=oper + ":"+"\n" +
                       "   " + cuerpoelif;
                        :}
    | ID:id PAR_C LLAV_A CUERPOELIF:cuerpoelif LLAV_C
                {:
                    RESULT=id + ":"+"\n" + 
                       "   " + cuerpoelif;
                :}
;

OPERIFS ::= OP:op4 SIGNO:signo2 OP:op5 TERMINO:term
            {:
             RESULT= op4 + " " + signo2 + " " + op5 + " " +term;
            :}
    | OP:op1 SIGNO:signo OP:op2
            {:
             RESULT= op1 + " " + signo + " " + op2;
            :}
    | NOT OP:op3
            {:
             RESULT=  " " + "not" + " " + op3;
            :}
    | NOT OP:op4 TERMINO:term
            {:
             RESULT=  " " + "not" + " " + op4 + " " + term;
            :}
    | SUPERNOT:supernot NOT OP:op5        
            {:
             RESULT=  supernot + " " + "not" + " " + op5;
            :}
    | SUPERNOT:supernot NOT OP:op6 TERMINO:term
            {:
             RESULT=  supernot + " " + "not" + " " + op6 + " " + term;
            :}
;


SUPERNOT ::= SUPERNOT:supernot NOT
            {:
             RESULT= supernot + " " + "not";
            :}
    | NOT
            {:
             RESULT= " " + "not";
            :}
;

CUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA MOREPRINTS:print2
                {:
                    RESULT="print("+varprint+")\n"
                                + print2;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT="print("+varprint+")\n";
                :}
    | MOREIFS:ifstate1 MORELIFS:elif
                {:
                    RESULT=ifstate1 + "   " + elif;
                :}
    | MOREIFS:ifstate 
                {:
                    RESULT=ifstate;
                :}
;

CUERPOELIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA  MOREPRINTS:print3
                {:
                    RESULT="print("+varprint+")\n"
                                +  print3;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT="print("+varprint+")\n";
                :}           
    | MOREIFS:ifs MORELIFS:elifs
                {:
                    RESULT= "      " + ifs + "   " + elifs;
                :}
    | MORELIFS:elifs 
                {:
                   RESULT=elifs;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA INT1 ID PYCOMA WHILEDOWHILE:whiledowhile
                {:
                    RESULT="print("+varprint+")\n"  + whiledowhile;
                :}  

;


MOREIFS ::= MOREIFS:moreifs IF:ifpy PAR_A IFARGIF:ifarg 
                {:
                    RESULT= moreifs + "   " + ifpy + " " + ifarg;
                :}
    | IF:ifpy PAR_A IFARGIF:ifarg 
                {:
                    RESULT=  ifpy + " " + ifarg;
                :}

    
;


IFARGIF ::= OPERIFS:oper PAR_C LLAV_A IFCUERPOIF:ifcuerpoif LLAV_C 
                        {:
                RESULT=oper + ":"+"\n" +
                     "   " + ifcuerpoif;
                        :}
    | ID:id PAR_C LLAV_A IFCUERPOIF:ifcuerpoif LLAV_C
                {:
                    RESULT=id + ":"+"\n" +
                      "    " + ifcuerpoif;
                :}             

;

IFCUERPOIF ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA  MOREPRINTS:print3
                {:
                    RESULT= "   " + "print("+varprint+")\n"
                                +  print3;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT= "      " + "print("+varprint+")\n";
                :}
    | MOREIFS:moreifs 
                {:
                    RESULT= "   " + moreifs;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA WHILESTATEIF:morewhifs2
                {:
                    RESULT= "      " + "print("+varprint+")\n" + "      "  + morewhifs2;
                :}
;



MORELIFS ::= MORELIFS:morelifs ELSEIF PAR_A IFARGELIF:elsearg  
                {:
                    RESULT=  morelifs + "elif" + " " + elsearg;
                :}
    | ELSEIF PAR_A IFARGELIF:elsearg  
                {:
                    RESULT= "elif" + " " + elsearg;
                :}
;

IFARGELIF ::= OPERIFS:oper PAR_C LLAV_A CUERPOELIF:cuerpoelif LLAV_C
                        {:
                RESULT=oper + ":"+"\n" +
                       "      " + cuerpoelif;
                        :}
    | ID:id PAR_C LLAV_A CUERPOELIF:cuerpoelif LLAV_C
                {:
                    RESULT=id + ":"+"\n" + 
                       "      " + cuerpoelif;
                :}
;



MOREPRINTS ::= MOREPRINTS:moreprints CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT= moreprints + "   " + "print("+varprint+")\n";
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT= "   " + "print("+varprint+")\n";
                :}
;

/* DECLARACIÓN Y ASIGNACION DE VARIABLES */

EXPRESION ::= ENTERO:nume
                {:
                    RESULT=nume;
                :}
    | DOUBLE:dble
                {:
                    RESULT=dble;
                :}
    | ID:id
                {:
                    RESULT=id;
                :}
    | COMILLA_S:cs1 ID:id COMILLA_S:cs2
               {:
                    RESULT=cs1 + id + cs2;
                :}
    | COMILLA_S:cs3 ENTERO:nume COMILLA_S:cs4
               {:
                    RESULT=cs3 + nume + cs4;
                :}           
;

/* OPERACIONES ARITMETICAS, LOGICAS, RELACIONALES  */

OPERACION ::= OP:op3 SIGNO:signo OP:op4 TERMINO:term
                {:
                  RESULT  = op3 + " " + signo + " " + op4 + " " + term +"\n";
                :}
    | OP:op1 SIGNO:signo1 OP:op2
                {:  
                    RESULT = op1  + " " + signo1 + " " + op2 +"\n";
                :}
    | NOT OP:op5
                {:  
                    RESULT = "not" +  " "  + op5  +"\n";
                :}
;


OP ::= ID:id
                {:
                    RESULT=id;
                :}
    | ENTERO:nume
                {:
                    RESULT=nume;
                :}
    | DOUBLE:dble
                {:
                    RESULT=dble;
                :}
    | CADENA:cad
                {:
                    RESULT=cad;
                :}
    | DECIMAL:dec
                {:
                    RESULT=dec;
                :}           
                
;


SIGNO ::= SUMA:sum
                {:
                    RESULT=sum;
                :}
    | RESTA:resta
                {:
                    RESULT=resta;
                :}
    | MULT:mult
                {:
                    RESULT=mult;
                :}
    | DIV:div
                {:
                    RESULT=div;
                :}
    | MAYOR:mayor
                {:
                    RESULT=mayor;
                :}
    | MENOR:menor
                {:
                    RESULT=menor;
                :}
    | MAYOR_I:mayori
                {:
                    RESULT=mayori;
                :}
    | MENOR_I:menori
                {:
                    RESULT=menori;
                :}
    | IGUAL:igu
                {:
                    RESULT=igu;
                :}
    | DIST:dist
                {:
                    RESULT=dist;
                :}
    | AND:and
                {:
                    RESULT="and";
                :}
    | OR:or
                {:
                    RESULT="or";
                :}
    | NOT
                 {:
                    RESULT="not";
                :}
;

/* OPERACIONES RECURSIVAS */

TERMINO ::= TERMINO:term SIGNO:signo OP:op
                {:
                    RESULT= term + " " + signo + "  " + op;
                :}
    | TERMINO:term SIGNO:signo SUPERNOT:not1 OP:op1
                {:
                    RESULT= term + " " + signo + "  " + not1 + "  " + op1;
                :}
    | SIGNO:signo2 OP:op2
                {:
                    RESULT= signo2 + "  " + op2;
                :}
    | SIGNO:signo3 SUPERNOT:not OP:op3
                {:
                    RESULT= signo3 + "  " + not + "  " + op3;
                :}
;

/* PARA CONSOLE.WRITE(); */

VARPRINT ::= CADENA:cad SUMA:sum ID:id
                {:
                    RESULT=cad + ", " + id;
                :}
    | CADENA:cad
                {:
                    RESULT=cad;
                :}
    | CADENA:cad SUMA:sum ENTERO:nume
                {:
                    RESULT=cad + ", " + nume;
                :}
    | ID:id
                {:
                    RESULT=id;
                :}
;

/* PARA SWITCH */

SWITCHSTATE ::= SWITCH:swit PAR_A ID:id PAR_C LLAV_A CASE:case1 ENTERO:enu1 DOSP ID:id2 ASIGNA ENTERO:enu2 PYCOMA SWITCHIF:switchif 
                {:
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "\n" +  switchif + "\n"; 
                :}
    |SWITCH:swit PAR_A ID:id PAR_C LLAV_A CASE:case1 ENTERO:enu1 DOSP ID:id2 ASIGNA ENTERO:enu2 PYCOMA CASE1:caso
                {:
                  tmp += "def " + swit + "(" + case1 + " , " + id2 + ")" + "\n" 
                                                        + "    " + "switcher" + " = {" + "\n" 
                                                        + "      " + enu1 + ": " + id2 + " = " + enu2 + "," + "\n"  
                                                        + caso; 
                :}

;

SWITCHIF ::= MOREIFS:ifstate1 MORELIFS:elif CASE1:case1
                {:
                    RESULT = "        " + ifstate1 + "        " + elif + "," + case1;
                :}
;


CASE1 ::= BREAK PYCOMA CASE ENTERO:enu2 DOSP ID:id3 ASIGNA ENTERO:enu3 PYCOMA SWITCHIF2:switchif
                {:
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + switchif; 
                :}
    | BREAK PYCOMA CASE ENTERO:enu2 DOSP ID:id3 ASIGNA ENTERO:enu3 PYCOMA CASE2:case2
                {:
                  RESULT = "      " + enu2 + ": " + id3 + " = " + enu3 + "," + "\n" + case2; 
                :}
;


SWITCHIF2 ::= MOREIFS:ifstate2 MORELIFS:elif CASE2:case2
                {:
                    RESULT = "        " + ifstate2 + "        " + elif + "," + case2;
                :}
;


CASE2 ::= CASE ENTERO:enu3 DOSP ID:id4 ASIGNA ENTERO:enu4 PYCOMA SWITCHIF3:switchif LLAV_C
                {:
                  RESULT = "      " + enu3 + ": " + id4 + " = " + enu4 + "," + "\n" + switchif + 
                                                  "     " + "}\n"; 
                :}  
;


SWITCHIF3 ::= MOREIFS:ifstate3 MORELIFS:elif CASED:cased 
            {:
                RESULT = "        " + ifstate3 + "        " + elif + "," + cased;
            :}
    | CASED:cased
            {: 
                RESULT = cased;
            :}
;


CASED ::= DEFAULT DOSP CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA  
                {:
                    RESULT= "      " + "4: " + "print("+varprint+"),\n";
                                
                :}
;

/* PARA CICLO FOR */


FORSTATE ::= FOR:fors PAR_A TIPO ID:id ASIGNA ENTERO PYCOMA OPERFOR:operfor PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR:cuerpofor LLAV_C
                        {:
                            tmp +=   "     "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "        " + cuerpofor ;  
                            :}
;

CUERPOFOR ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA MOREPRINTS:print2
                {:
                    RESULT="print("+varprint+")\n"
                                + print2;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT="print("+varprint+")\n";
                :}
    | MOREFORS:morefors
                {:
                    RESULT= morefors;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA MOREFORS:morefors
                {:
                    RESULT="print("+varprint+")\n" + "           " + morefors;
                :}
;

MOREFORS ::= MOREFORS FOR:fors PAR_A TIPO ID:id ASIGNA ENTERO PYCOMA OPERFOR:operfor PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR:cuerpofor LLAV_C
                        {:
                            RESULT =   "       "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "                         " + cuerpofor ;  
                            :}
    | FOR:fors PAR_A TIPO ID:id ASIGNA ENTERO PYCOMA OPERFOR:operfor PYCOMA ID SUMA SUMA PAR_C LLAV_A CUERPOFOR:cuerpofor LLAV_C
                        {:
                            RESULT =   "       "  + fors + " " + id + " in range (" + "1, " + operfor + "): " + "\n" 
                                                    + "                         " + cuerpofor ;  
                            :}
;


OPERFOR ::= OP:op1 SIGNO:signo OP:op2
            {:
             RESULT= op2;
            :}
;



/* PARA CICLO WHILE */

WHILESTATE ::= WHILE:whiles PAR_A OPERIFS:operifs PAR_C LLAV_A CUERPOWHILE:cuerpowhile ID:id1 ASIGNA ID:id2 SUMA ENTERO:nume PYCOMA LLAV_C
            {:
             tmp += whiles + " " + operifs + ":" + "\n" + 
                                "      " + cuerpowhile + 
                                "         " + id1 + " = " + id2 + " + " + nume + "\n";
            :}
    | WHILE:whiles PAR_A OPERIFS:operifs PAR_C LLAV_A CUERPOWHILE:cuerpowhile PYCOMA LLAV_C
            {:
             tmp += whiles + " " + operifs + ":" + "\n" + 
                                "      " + cuerpowhile;
            :}
;

WHILEDOWHILE ::= WHILE:whiles PAR_A OPERIFS:operifs PAR_C LLAV_A CUERPOWHILE:cuerpowhile LLAV_C
            {:
             RESULT = "            " + whiles + " " + operifs + ":" + "\n" + 
                                "           " + cuerpowhile;
            :}
;

CUERPOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA MOREPRINTS:print2
                {:
                    RESULT="print("+varprint+")\n"
                                + print2;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT="print("+varprint+")\n";
                :}
    | MOREIFS:moreifs
                {:
                    RESULT=  moreifs;
                :}
; 

WHILESTATEIF ::= WHILE:whiles PAR_A OPERIFS:operifs PAR_C LLAV_A CUERPOWHILE:cuerpowhile ID:id1 ASIGNA ID:id2 SUMA ENTERO:nume PYCOMA LLAV_C
            {:
             RESULT = whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile + 
                                "         " + id1 + " = " + id2 + " + " + nume + "\n";
            :}
    | WHILE:whiles PAR_A OPERIFS:operifs PAR_C LLAV_A CUERPOWHILE:cuerpowhile PYCOMA LLAV_C
            {:
             RESULT = whiles + " " + operifs + ":" + "\n" + 
                                "         " + cuerpowhile;
            :}
;







/* PARA CICLO DOWHILE */




DOWHILESTATE ::= INT1 ID:id ASIGNA ENTERO:nume PYCOMA DO LLAV_A CUERPODOWHILE:cuerpodowhile OPERADOR:opr LLAV_C WHILE PAR_A OPERIFS:operifs PAR_C PYCOMA
            {:
             tmp += "          i = " + nume + "\n" 
                               + "          " + "while True:" +   "\n"  +
                                "              " + cuerpodowhile + 
                                "              " +    opr  + 
                                "              " + "if (" + operifs + "):" +   "\n" +  
                                "                         " + "break" + "\n";
                                
            :}
;

OPERADOR ::= ID:id1 ASIGNA ID:id2 SUMA ENTERO:nume PYCOMA
                {:
                    RESULT = id1 + " = " + id2 + " + " + nume + "\n";
                :}
;


CUERPODOWHILE ::= CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA MOREPRINTS:print2
                {:
                    RESULT="print("+varprint+")\n"
                                + print2;
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA
                {:
                    RESULT="print("+varprint+")\n";
                :}
    | CONSOLE PUNTO WRITE PAR_A VARPRINT:varprint PAR_C PYCOMA DOWHILEIF:dowhileif
                {:
                    RESULT="print("+varprint+")\n" + dowhileif;
                :}
;

DOWHILEIF ::= MOREIFS:ifstate1 MORELIFS:elif 
                {:
                    RESULT = "        " + ifstate1 + "        " + elif;
                :}
;



/* FUNCIONES ESTADÍSTICAS */


RGB_STATE ::= RGB PAR_A PAR_C LLAV_A INSTRUCCIONESFUNC LLAV_C {:
    gb.Graficar(titulo,titulox,tituloy,ValuesX,Values);
    titulo="";
    ValuesX.clear();
    Values.clear();

:}
    
;

RGP_STATE ::= RGP PAR_A  PAR_C LLAV_A INSTRUCCIONESFUNC LLAV_C {:
         gp.Graficar(titulo, ValuesX, Values);
         titulo="";
         ValuesX.clear();
         Values.clear();
         
:}
    

;

RDG_STATE ::= RDG PAR_A PAR_C LLAV_A INSTRUCCIONESFUNC LLAV_C


;

INSTRUCCIONESFUNC ::= INSTRUCCIONESFUNC TIPO INSTRUCCIONFUNC

    | TIPO INSTRUCCIONFUNC 

;

INSTRUCCIONFUNC ::= RTitulo ASIGNA CADENA:a {: titulo = (String)a; :} PYCOMA
                                |RTitulo ASIGNA ID:a {: titulo = ts.get(a);  :} PYCOMA
                                | CORCH_A CORCH_C REjex ASIGNA LLAV_A LISTAEJEX LLAV_C PYCOMA
                                | CORCH_A CORCH_C RValores ASIGNA LLAV_A LISTAVALORES  LLAV_C PYCOMA
                                | RTituloX ASIGNA CADENA:a {: titulox=(String)a;:} PYCOMA
                                | RTituloX ASIGNA ID:a {: titulox= ts.get(a); :} PYCOMA
                                | RTituloY ASIGNA CADENA:a {:tituloy=(String)a;:} PYCOMA
                                | RTituloY ASIGNA ID:a {:tituloy=ts.get(a); :} PYCOMA
                                | ID:a ASIGNA CADENA:b   {: ts.add(a,b); :}PYCOMA
                                | ID:a ASIGNA DOLAR LLAV_A NEWVALOR COMA CADENA COMA CADENA:clavejson LLAV_C {:  String value = JsonHashTable.get(clavejson); 

if (value != null) {
    ts.add(a, value); 
} else {
    System.out.println("error");
} :}PYCOMA
                                | ID:a ASIGNA DOUBLE:b {: ts.add(a,b); :}PYCOMA
;
LISTAEJEX ::= LISTAEJEX COMA ELEMENTOSEJEX:a {: ValuesX.add((String)a); :}
                    | ELEMENTOSEJEX:a  {: ValuesX.add((String)a); RESULT = ValuesX; :}

;
LISTAVALORES ::= LISTAVALORES COMA ELEMENTOSVALORES:a {: Values.add((Double)a); :}
                            |ELEMENTOSVALORES:a  {: Values.add((Double)a); RESULT = Values; :}

;
ELEMENTOSEJEX ::= CADENA:a {: RESULT= a; :}
                                    | ID:a {:  RESULT = ts.get(a);  :}
;
ELEMENTOSVALORES ::= DOUBLE:a {: RESULT= Double.parseDouble(a); :}
                                    | ID:a {:  RESULT = Double.parseDouble(ts.get(a));  :}
;








