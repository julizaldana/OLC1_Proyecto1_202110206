
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorJson;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import ReportesHtml.ReporteError;
import ReportesHtml.ReporteToken;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SintacticoJson extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SintacticoJson() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SintacticoJson(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJson(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\006\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\005\000\002\004\005\000\002\004\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\004\007\004\001\002\000\004\005\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\010\uffff\012\uffff\001\002\000\004\011\015\001" +
    "\002\000\006\010\012\012\013\001\002\000\004\005\010" +
    "\001\002\000\004\002\000\001\002\000\006\010\ufffe\012" +
    "\ufffe\001\002\000\006\005\016\006\017\001\002\000\006" +
    "\010\ufffc\012\ufffc\001\002\000\006\010\ufffd\012\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\015\000\004\002\004\001\001\000\006\003\010\004" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJson$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJson$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJson$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        String lexema = (String) s.value;
        String descripcion = "Error sint치ctico";
        int linea = s.left + 1;
        int columna = s.right + 1;

        // crear objeto de reporte error
        ReporteError error = new ReporteError(lexema, descripcion, linea, columna);

        // se a침ade error a la lista de errores
        ReporteError.errorList.add(error);

        System.out.println("Error sint치ctico: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sint치ctico: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    String tmp="";


        // Creo una lista de tipo String llamada 'resultados', donde guardare cada uno de los resultados analizados
        public List<String> resultados = new ArrayList<String>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SintacticoJson$actions {
  private final SintacticoJson parser;

  /** Constructor */
  CUP$SintacticoJson$actions(SintacticoJson parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SintacticoJson$do_action_part00000000(
    int                        CUP$SintacticoJson$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJson$parser,
    java.util.Stack            CUP$SintacticoJson$stack,
    int                        CUP$SintacticoJson$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJson$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJson$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJson$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJson$parser.done_parsing();
          return CUP$SintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= LLAV_A elementos LLAV_C 
            {
              Object RESULT =null;

              CUP$SintacticoJson$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()), RESULT);
            }
          return CUP$SintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // elementos ::= elemento 
            {
              Object RESULT =null;

              CUP$SintacticoJson$result = parser.getSymbolFactory().newSymbol("elementos",1, ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()), RESULT);
            }
          return CUP$SintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elementos ::= elementos COMA elemento 
            {
              Object RESULT =null;

              CUP$SintacticoJson$result = parser.getSymbolFactory().newSymbol("elementos",1, ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()), RESULT);
            }
          return CUP$SintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elemento ::= STRING DOSPTS DOUBLE 
            {
              Object RESULT =null;
		int claveleft = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)).left;
		int claveright = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)).right;
		String clave = (String)((java_cup.runtime.Symbol) CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$SintacticoJson$stack.peek()).value;
		
                    JsonHashTable.add(clave,valor);
                    String clav = JsonHashTable.get(clave);
                    System.out.println("Added key: " + clave + ", value: " + valor + " to jsonHash");           
                    System.out.println(clav);
            
              CUP$SintacticoJson$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()), RESULT);
            }
          return CUP$SintacticoJson$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= STRING DOSPTS STRING 
            {
              Object RESULT =null;
		int clave1left = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)).left;
		int clave1right = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)).right;
		String clave1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()).right;
		String valor1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoJson$stack.peek()).value;
		
                    JsonHashTable.add(clave1,valor1);
                    String clav1 = JsonHashTable.get(clave1);
                    System.out.println("Added key: " + clave1 + ", value: " + valor1 + " to jsonHash");         
                    System.out.println(clav1);                 
            
              CUP$SintacticoJson$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.elementAt(CUP$SintacticoJson$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJson$stack.peek()), RESULT);
            }
          return CUP$SintacticoJson$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SintacticoJson$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SintacticoJson$do_action(
    int                        CUP$SintacticoJson$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJson$parser,
    java.util.Stack            CUP$SintacticoJson$stack,
    int                        CUP$SintacticoJson$top)
    throws java.lang.Exception
    {
              return CUP$SintacticoJson$do_action_part00000000(
                               CUP$SintacticoJson$act_num,
                               CUP$SintacticoJson$parser,
                               CUP$SintacticoJson$stack,
                               CUP$SintacticoJson$top);
    }
}

}
